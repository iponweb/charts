{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AttachMetadata": {
      "additionalProperties": false,
      "properties": {
        "node": {
          "description": "When set to true, Prometheus must have permissions to get Nodes.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth": {
      "additionalProperties": false,
      "description": "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
      "properties": {
        "password": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "The secret in the service monitor namespace that contains the password for authentication."
        },
        "username": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "The secret in the service monitor namespace that contains the username for authentication."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.NamespaceSelector": {
      "additionalProperties": false,
      "description": "NamespaceSelector is a selector for selecting either all namespaces or a list of namespaces. If `any` is true, it takes precedence over `matchNames`. If `matchNames` is empty and `any` is false, it means that the objects are selected from the current namespace.",
      "properties": {
        "any": {
          "description": "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
          "type": "boolean"
        },
        "matchNames": {
          "description": "List of namespace names to select from.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2": {
      "additionalProperties": false,
      "description": "OAuth2 allows an endpoint to authenticate with OAuth2. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#oauth2",
      "properties": {
        "clientId": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "The secret or configmap containing the OAuth2 client id"
        },
        "clientSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "The secret containing the OAuth2 client secret"
        },
        "endpointParams": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Parameters to append to the token URL",
          "type": "object"
        },
        "scopes": {
          "description": "OAuth2 scopes used for the token request",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "tokenUrl": {
          "default": "",
          "description": "The URL to fetch the token from",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "tokenUrl"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpoint": {
      "additionalProperties": false,
      "description": "PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization section for this endpoint"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint"
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator."
        },
        "enableHttp2": {
          "description": "Whether to enable HTTP2.",
          "type": "boolean"
        },
        "filterRunning": {
          "description": "Drop pods that are not running. (Failed, Succeeded). Enabled by default. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase",
          "type": "boolean"
        },
        "followRedirects": {
          "description": "FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.",
          "type": "boolean"
        },
        "honorLabels": {
          "description": "HonorLabels chooses the metric's labels on collisions with target labels.",
          "type": "boolean"
        },
        "honorTimestamps": {
          "description": "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.",
          "type": "boolean"
        },
        "interval": {
          "description": "Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.",
          "type": "string"
        },
        "metricRelabelings": {
          "description": "MetricRelabelConfigs to apply to samples before ingestion.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer."
        },
        "params": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "Optional HTTP URL parameters",
          "type": "object"
        },
        "path": {
          "description": "HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. `/metrics`).",
          "type": "string"
        },
        "port": {
          "description": "Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.",
          "type": "string"
        },
        "proxyUrl": {
          "description": "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
          "type": "string"
        },
        "relabelings": {
          "description": "RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "scheme": {
          "description": "HTTP scheme to use for scraping.",
          "type": "string"
        },
        "scrapeTimeout": {
          "description": "Timeout after which the scrape is ended If not specified, the Prometheus global scrape interval is used.",
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Deprecated: Use 'port' instead."
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpointTLSConfig",
          "description": "TLS configuration to use when scraping the endpoint."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpointTLSConfig": {
      "additionalProperties": false,
      "description": "PodMetricsEndpointTLSConfig specifies TLS configuration parameters.",
      "properties": {
        "ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Struct containing the CA cert to use for the targets."
        },
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Struct containing the client cert file for the targets."
        },
        "insecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing the client key file for the targets."
        },
        "serverName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitorSpec": {
      "additionalProperties": false,
      "description": "PodMonitorSpec contains specification parameters for a PodMonitor.",
      "properties": {
        "attachMetadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AttachMetadata",
          "description": "Attaches node metadata to discovered targets. Only valid for role: pod. Only valid in Prometheus versions 2.35.0 and newer."
        },
        "jobLabel": {
          "description": "The label to use to retrieve the job name from.",
          "type": "string"
        },
        "labelLimit": {
          "description": "Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelNameLengthLimit": {
          "description": "Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelValueLengthLimit": {
          "description": "Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.NamespaceSelector",
          "default": {},
          "description": "Selector to select which namespaces the Endpoints objects are discovered from."
        },
        "podMetricsEndpoints": {
          "description": "A list of endpoints allowed as part of this PodMonitor.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpoint",
            "default": {}
          },
          "type": "array"
        },
        "podTargetLabels": {
          "description": "PodTargetLabels transfers labels on the Kubernetes Pod onto the target.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "sampleLimit": {
          "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
          "format": "int64",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "default": {},
          "description": "Selector to select Pod objects."
        },
        "targetLimit": {
          "description": "TargetLimit defines a limit on the number of scraped targets that will be accepted.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "podMetricsEndpoints",
        "selector"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleSpec": {
      "additionalProperties": false,
      "description": "PrometheusRuleSpec contains specification parameters for a Rule.",
      "properties": {
        "groups": {
          "description": "Content of Prometheus rule file",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RuleGroup",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig": {
      "additionalProperties": false,
      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `\u003cmetric_relabel_configs\u003e`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
      "properties": {
        "action": {
          "description": "Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus \u003e= 2.36.",
          "type": "string"
        },
        "modulus": {
          "description": "Modulus to take of the hash of the source label values.",
          "format": "int64",
          "type": "integer"
        },
        "regex": {
          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
          "type": "string"
        },
        "replacement": {
          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
          "type": "string"
        },
        "separator": {
          "description": "Separator placed between concatenated source label values. default is ';'.",
          "type": "string"
        },
        "sourceLabels": {
          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "targetLabel": {
          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Rule": {
      "additionalProperties": false,
      "description": "Rule describes an alerting or recording rule See Prometheus documentation: [alerting](https://www.prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) or [recording](https://www.prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules) rule",
      "properties": {
        "alert": {
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        },
        "expr": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": {}
        },
        "for": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        },
        "record": {
          "type": "string"
        }
      },
      "required": [
        "expr"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RuleGroup": {
      "additionalProperties": false,
      "description": "RuleGroup is a list of sequentially evaluated recording and alerting rules. Note: PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances.  Valid values for this field are 'warn' or 'abort'.  More info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response",
      "properties": {
        "interval": {
          "type": "string"
        },
        "name": {
          "default": "",
          "type": "string"
        },
        "partial_response_strategy": {
          "type": "string"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Rule",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "rules"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization": {
      "additionalProperties": false,
      "description": "SafeAuthorization specifies a subset of the Authorization struct, that is safe for use in Endpoints (no CredentialsFile field)",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "The secret's key that contains the credentials of the request"
        },
        "type": {
          "description": "Set the authentication type. Defaults to Bearer, Basic will cause an error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig": {
      "additionalProperties": false,
      "description": "SafeTLSConfig specifies safe TLS configuration parameters.",
      "properties": {
        "ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Struct containing the CA cert to use for the targets."
        },
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Struct containing the client cert file for the targets."
        },
        "insecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing the client key file for the targets."
        },
        "serverName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap": {
      "additionalProperties": false,
      "description": "SecretOrConfigMap allows to specify data as a Secret or ConfigMap. Fields are mutually exclusive.",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "ConfigMap containing data to use for the targets."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing data to use for the targets."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Sigv4": {
      "additionalProperties": false,
      "description": "Sigv4 optionally configures AWS's Signature Verification 4 signing process to sign requests. Cannot be set at the same time as basic_auth or authorization.",
      "properties": {
        "accessKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used."
        },
        "profile": {
          "description": "Profile is the named AWS profile used to authenticate.",
          "type": "string"
        },
        "region": {
          "description": "Region is the AWS region. If blank, the region from the default credentials chain used.",
          "type": "string"
        },
        "roleArn": {
          "description": "RoleArn is the named AWS profile used to authenticate.",
          "type": "string"
        },
        "secretKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfigSpec": {
      "additionalProperties": false,
      "description": "AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.",
      "properties": {
        "inhibitRules": {
          "description": "List of inhibition rules. The rules will only apply to alerts matching the resource's namespace.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.InhibitRule",
            "default": {}
          },
          "type": "array"
        },
        "receivers": {
          "description": "List of receivers.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Receiver",
            "default": {}
          },
          "type": "array"
        },
        "route": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Route",
          "description": "The Alertmanager route definition for alerts matching the resource's namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route."
        },
        "timeIntervals": {
          "description": "List of TimeInterval specifying when the routes should be muted or active.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeInterval",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.DayOfMonthRange": {
      "additionalProperties": false,
      "description": "DayOfMonthRange is an inclusive range of days of the month beginning at 1",
      "properties": {
        "end": {
          "description": "End of the inclusive range",
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "description": "Start of the inclusive range",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.EmailConfig": {
      "additionalProperties": false,
      "description": "EmailConfig configures notifications via Email.",
      "properties": {
        "authIdentity": {
          "description": "The identity to use for authentication.",
          "type": "string"
        },
        "authPassword": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "authSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "authUsername": {
          "description": "The username to use for authentication.",
          "type": "string"
        },
        "from": {
          "description": "The sender address.",
          "type": "string"
        },
        "headers": {
          "description": "Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "hello": {
          "description": "The hostname to identify to the SMTP server.",
          "type": "string"
        },
        "html": {
          "description": "The HTML body of the email notification.",
          "type": "string"
        },
        "requireTLS": {
          "description": "The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.",
          "type": "boolean"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "smarthost": {
          "description": "The SMTP host and port through which emails are sent. E.g. example.com:25",
          "type": "string"
        },
        "text": {
          "description": "The text body of the email notification.",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig",
          "description": "TLS configuration"
        },
        "to": {
          "description": "The email address to send notifications to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig": {
      "additionalProperties": false,
      "description": "HTTPConfig defines a client HTTP configuration. See https://prometheus.io/docs/alerting/latest/configuration/#http_config",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence."
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "followRedirects": {
          "description": "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.",
          "type": "boolean"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 client credentials used to fetch a token for the targets."
        },
        "proxyURL": {
          "description": "Optional proxy URL.",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig",
          "description": "TLS configuration for the client."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.InhibitRule": {
      "additionalProperties": false,
      "description": "InhibitRule defines an inhibition rule that allows to mute alerts when other alerts are already firing. See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule",
      "properties": {
        "equal": {
          "description": "Labels that must have an equal value in the source and target alert for the inhibition to take effect.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "sourceMatch": {
          "description": "Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource's namespace.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher",
            "default": {}
          },
          "type": "array"
        },
        "targetMatch": {
          "description": "Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource's namespace.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue": {
      "additionalProperties": false,
      "description": "KeyValue defines a (key, value) tuple.",
      "properties": {
        "key": {
          "default": "",
          "description": "Key of the tuple.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value of the tuple.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher": {
      "additionalProperties": false,
      "description": "Matcher defines how to match on alert's labels.",
      "properties": {
        "matchType": {
          "description": "Match operator, one of `=` (equal to), `!=` (not equal to), `=~` (regex match) or `!~` (not regex match). Negative operators (`!=` and `!~`) require Alertmanager \u003e= v0.22.0.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Label to match.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Label value to match.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfig": {
      "additionalProperties": false,
      "description": "OpsGenieConfig configures notifications via OpsGenie. See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config",
      "properties": {
        "actions": {
          "description": "Comma separated list of actions that will be available for the alert.",
          "type": "string"
        },
        "apiKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "apiURL": {
          "description": "The URL to send OpsGenie API requests to.",
          "type": "string"
        },
        "description": {
          "description": "Description of the incident.",
          "type": "string"
        },
        "details": {
          "description": "A set of arbitrary key/value pairs that provide further detail about the incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "entity": {
          "description": "Optional field that can be used to specify which domain alert is related to.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "Alert text limited to 130 characters.",
          "type": "string"
        },
        "note": {
          "description": "Additional alert note.",
          "type": "string"
        },
        "priority": {
          "description": "Priority level of alert. Possible values are P1, P2, P3, P4, and P5.",
          "type": "string"
        },
        "responders": {
          "description": "List of responders responsible for notifications.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfigResponder",
            "default": {}
          },
          "type": "array"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "source": {
          "description": "Backlink to the sender of the notification.",
          "type": "string"
        },
        "tags": {
          "description": "Comma separated list of tags attached to the notifications.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfigResponder": {
      "additionalProperties": false,
      "description": "OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.",
      "properties": {
        "id": {
          "description": "ID of the responder.",
          "type": "string"
        },
        "name": {
          "description": "Name of the responder.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of responder.",
          "type": "string"
        },
        "username": {
          "description": "Username of the responder.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyConfig": {
      "additionalProperties": false,
      "description": "PagerDutyConfig configures notifications via PagerDuty. See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config",
      "properties": {
        "class": {
          "description": "The class/type of the event.",
          "type": "string"
        },
        "client": {
          "description": "Client identification.",
          "type": "string"
        },
        "clientURL": {
          "description": "Backlink to the sender of notification.",
          "type": "string"
        },
        "component": {
          "description": "The part or component of the affected system that is broken.",
          "type": "string"
        },
        "description": {
          "description": "Description of the incident.",
          "type": "string"
        },
        "details": {
          "description": "Arbitrary key/value pairs that provide further detail about the incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "group": {
          "description": "A cluster or grouping of sources.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "pagerDutyImageConfigs": {
          "description": "A list of image details to attach that provide further detail about an incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyImageConfig",
            "default": {}
          },
          "type": "array"
        },
        "pagerDutyLinkConfigs": {
          "description": "A list of link details to attach that provide further detail about an incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyLinkConfig",
            "default": {}
          },
          "type": "array"
        },
        "routingKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "serviceKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the PagerDuty service key (when using integration type \"Prometheus\"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "severity": {
          "description": "Severity of the incident.",
          "type": "string"
        },
        "url": {
          "description": "The URL to send requests to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyImageConfig": {
      "additionalProperties": false,
      "description": "PagerDutyImageConfig attaches images to an incident",
      "properties": {
        "alt": {
          "description": "Alt is the optional alternative text for the image.",
          "type": "string"
        },
        "href": {
          "description": "Optional URL; makes the image a clickable link.",
          "type": "string"
        },
        "src": {
          "description": "Src of the image being attached to the incident",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyLinkConfig": {
      "additionalProperties": false,
      "description": "PagerDutyLinkConfig attaches text links to an incident",
      "properties": {
        "alt": {
          "description": "Text that describes the purpose of the link, and can be used as the link's text.",
          "type": "string"
        },
        "href": {
          "description": "Href is the URL of the link to be attached",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PushoverConfig": {
      "additionalProperties": false,
      "description": "PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config",
      "properties": {
        "expire": {
          "description": "How long your notification will continue to be retried for, unless the user acknowledges the notification.",
          "type": "string"
        },
        "html": {
          "description": "Whether notification message is HTML or plain text.",
          "type": "boolean"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "Notification message.",
          "type": "string"
        },
        "priority": {
          "description": "Priority, see https://pushover.net/api#priority",
          "type": "string"
        },
        "retry": {
          "description": "How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "sound": {
          "description": "The name of one of the sounds supported by device clients to override the user's default sound choice",
          "type": "string"
        },
        "title": {
          "description": "Notification title.",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the registered application's API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "url": {
          "description": "A supplementary URL shown alongside the message.",
          "type": "string"
        },
        "urlTitle": {
          "description": "A title for supplementary URL, otherwise just the URL is shown",
          "type": "string"
        },
        "userKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the recipient user's user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Receiver": {
      "additionalProperties": false,
      "description": "Receiver defines one or more notification integrations.",
      "properties": {
        "emailConfigs": {
          "description": "List of Email configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.EmailConfig",
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "default": "",
          "description": "Name of the receiver. Must be unique across all items from the list.",
          "type": "string"
        },
        "opsgenieConfigs": {
          "description": "List of OpsGenie configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfig",
            "default": {}
          },
          "type": "array"
        },
        "pagerdutyConfigs": {
          "description": "List of PagerDuty configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyConfig",
            "default": {}
          },
          "type": "array"
        },
        "pushoverConfigs": {
          "description": "List of Pushover configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PushoverConfig",
            "default": {}
          },
          "type": "array"
        },
        "slackConfigs": {
          "description": "List of Slack configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfig",
            "default": {}
          },
          "type": "array"
        },
        "snsConfigs": {
          "description": "List of SNS configurations",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SNSConfig",
            "default": {}
          },
          "type": "array"
        },
        "telegramConfigs": {
          "description": "List of Telegram configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TelegramConfig",
            "default": {}
          },
          "type": "array"
        },
        "victoropsConfigs": {
          "description": "List of VictorOps configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.VictorOpsConfig",
            "default": {}
          },
          "type": "array"
        },
        "webhookConfigs": {
          "description": "List of webhook configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WebhookConfig",
            "default": {}
          },
          "type": "array"
        },
        "wechatConfigs": {
          "description": "List of WeChat configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WeChatConfig",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Route": {
      "additionalProperties": false,
      "description": "Route defines a node in the routing tree.",
      "properties": {
        "continue": {
          "description": "Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.",
          "type": "boolean"
        },
        "groupBy": {
          "description": "List of labels to group by. Labels must not be repeated (unique list). Special label \"...\" (aggregate by all possible labels), if provided, must be the only element in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "groupInterval": {
          "description": "How long to wait before sending an updated notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: \"5m\"",
          "type": "string"
        },
        "groupWait": {
          "description": "How long to wait before sending the initial notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: \"30s\"",
          "type": "string"
        },
        "matchers": {
          "description": "List of matchers that the alert's labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: \u003cobject namespace\u003e` matcher.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher",
            "default": {}
          },
          "type": "array"
        },
        "muteTimeIntervals": {
          "description": "Note: this comment applies to the field definition above but appears below otherwise it gets included in the generated manifest. CRD schema doesn't support self-referential types for now (see https://github.com/kubernetes/kubernetes/issues/62872). We have to use an alternative type to circumvent the limitation. The downside is that the Kube API can't validate the data beyond the fact that it is a valid JSON representation. MuteTimeIntervals is a list of MuteTimeInterval names that will mute this route when matched,",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "receiver": {
          "default": "",
          "description": "Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.",
          "type": "string"
        },
        "repeatInterval": {
          "description": "How long to wait before repeating the last notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: \"4h\"",
          "type": "string"
        },
        "routes": {
          "description": "Child routes.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SNSConfig": {
      "additionalProperties": false,
      "description": "SNSConfig configures notifications via AWS SNS. See https://prometheus.io/docs/alerting/latest/configuration/#sns_configs",
      "properties": {
        "apiURL": {
          "description": "The SNS API URL i.e. https://sns.us-east-2.amazonaws.com. If not specified, the SNS API URL from the SNS SDK will be used.",
          "type": "string"
        },
        "attributes": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "SNS message attributes.",
          "type": "object"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "The message content of the SNS notification.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the TopicARN or TargetARN.",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "sigv4": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Sigv4",
          "description": "Configures AWS's Signature Verification 4 signing process to sign requests."
        },
        "subject": {
          "description": "Subject line when the message is delivered to email endpoints.",
          "type": "string"
        },
        "targetARN": {
          "description": "The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or PhoneNumber.",
          "type": "string"
        },
        "topicARN": {
          "description": "SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic If you don't specify this value, you must specify a value for the PhoneNumber or TargetARN.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector": {
      "additionalProperties": false,
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "default": "",
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the secret in the object's namespace to select from.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "key"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackAction": {
      "additionalProperties": false,
      "description": "SlackAction configures a single Slack action that is sent with each notification. See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons for more information.",
      "properties": {
        "confirm": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfirmationField"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "text": {
          "default": "",
          "type": "string"
        },
        "type": {
          "default": "",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfig": {
      "additionalProperties": false,
      "description": "SlackConfig configures notifications via Slack. See https://prometheus.io/docs/alerting/latest/configuration/#slack_config",
      "properties": {
        "actions": {
          "description": "A list of Slack actions that are sent with each notification.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackAction",
            "default": {}
          },
          "type": "array"
        },
        "apiURL": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "callbackId": {
          "type": "string"
        },
        "channel": {
          "description": "The channel or user to send notifications to.",
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "fallback": {
          "type": "string"
        },
        "fields": {
          "description": "A list of Slack fields that are sent with each notification.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackField",
            "default": {}
          },
          "type": "array"
        },
        "footer": {
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "iconEmoji": {
          "type": "string"
        },
        "iconURL": {
          "type": "string"
        },
        "imageURL": {
          "type": "string"
        },
        "linkNames": {
          "type": "boolean"
        },
        "mrkdwnIn": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "pretext": {
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "shortFields": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "thumbURL": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "titleLink": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfirmationField": {
      "additionalProperties": false,
      "description": "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
      "properties": {
        "dismissText": {
          "type": "string"
        },
        "okText": {
          "type": "string"
        },
        "text": {
          "default": "",
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackField": {
      "additionalProperties": false,
      "description": "SlackField configures a single Slack field that is sent with each notification. Each field must contain a title, value, and optionally, a boolean value to indicate if the field is short enough to be displayed next to other fields designated as short. See https://api.slack.com/docs/message-attachments#fields for more information.",
      "properties": {
        "short": {
          "type": "boolean"
        },
        "title": {
          "default": "",
          "type": "string"
        },
        "value": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "title",
        "value"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TelegramConfig": {
      "additionalProperties": false,
      "description": "TelegramConfig configures notifications via Telegram. See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config",
      "properties": {
        "apiURL": {
          "description": "The Telegram API URL i.e. https://api.telegram.org. If not specified, default API URL will be used.",
          "type": "string"
        },
        "botToken": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "chatID": {
          "description": "The Telegram chat ID.",
          "format": "int64",
          "type": "integer"
        },
        "disableNotifications": {
          "description": "Disable telegram notifications",
          "type": "boolean"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "Message template",
          "type": "string"
        },
        "parseMode": {
          "description": "Parse mode for telegram message",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether to notify about resolved alerts.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeInterval": {
      "additionalProperties": false,
      "description": "TimeInterval specifies the periods in time when notifications will be muted or active.",
      "properties": {
        "name": {
          "description": "Name of the time interval.",
          "type": "string"
        },
        "timeIntervals": {
          "description": "TimeIntervals is a list of TimePeriod.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimePeriod",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimePeriod": {
      "additionalProperties": false,
      "description": "TimePeriod describes periods of time.",
      "properties": {
        "daysOfMonth": {
          "description": "DaysOfMonth is a list of DayOfMonthRange",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.DayOfMonthRange",
            "default": {}
          },
          "type": "array"
        },
        "months": {
          "description": "Months is a list of MonthRange",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "times": {
          "description": "Times is a list of TimeRange",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeRange",
            "default": {}
          },
          "type": "array"
        },
        "weekdays": {
          "description": "Weekdays is a list of WeekdayRange",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "years": {
          "description": "Years is a list of YearRange",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeRange": {
      "additionalProperties": false,
      "description": "TimeRange defines a start and end time in 24hr format",
      "properties": {
        "endTime": {
          "description": "EndTime is the end time in 24hr format.",
          "type": "string"
        },
        "startTime": {
          "description": "StartTime is the start time in 24hr format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.VictorOpsConfig": {
      "additionalProperties": false,
      "description": "VictorOpsConfig configures notifications via VictorOps. See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "apiUrl": {
          "description": "The VictorOps API URL.",
          "type": "string"
        },
        "customFields": {
          "description": "Additional custom fields for notification.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "entityDisplayName": {
          "description": "Contains summary of the alerted problem.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "The HTTP client's configuration."
        },
        "messageType": {
          "description": "Describes the behavior of the alert (CRITICAL, WARNING, INFO).",
          "type": "string"
        },
        "monitoringTool": {
          "description": "The monitoring tool the state message is from.",
          "type": "string"
        },
        "routingKey": {
          "default": "",
          "description": "A key used to map the alert to a team.",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "stateMessage": {
          "description": "Contains long explanation of the alerted problem.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WeChatConfig": {
      "additionalProperties": false,
      "description": "WeChatConfig configures notifications via WeChat. See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config",
      "properties": {
        "agentID": {
          "type": "string"
        },
        "apiSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "apiURL": {
          "description": "The WeChat API URL.",
          "type": "string"
        },
        "corpID": {
          "description": "The corp id for authentication.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "API request data as defined by the WeChat API.",
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "toParty": {
          "type": "string"
        },
        "toTag": {
          "type": "string"
        },
        "toUser": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WebhookConfig": {
      "additionalProperties": false,
      "description": "WebhookConfig configures notifications via a generic receiver supporting the webhook payload. See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config",
      "properties": {
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "maxAlerts": {
          "description": "Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.",
          "format": "int32",
          "type": "integer"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "url": {
          "description": "The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.",
          "type": "string"
        },
        "urlSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSAuth": {
      "additionalProperties": false,
      "description": "AWSAuth tells the controller how to do authentication with aws. Only one of secretRef or jwt can be specified. if none is specified the controller will load credentials using the aws sdk defaults.",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSJWTAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSAuthSecretRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSAuthSecretRef": {
      "additionalProperties": false,
      "description": "AWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "properties": {
        "accessKeyIDSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeyID is used for authentication"
        },
        "secretAccessKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessKey is used for authentication"
        },
        "sessionTokenSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSJWTAuth": {
      "additionalProperties": false,
      "description": "Authenticate against AWS using service account tokens.",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AWSProvider": {
      "additionalProperties": false,
      "description": "AWSProvider configures a store to sync secrets with AWS.",
      "properties": {
        "additionalRoles": {
          "description": "AdditionalRoles is a chained list of Role ARNs which the provider will sequentially assume before assuming the Role",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSAuth",
          "default": {},
          "description": "Auth defines the information necessary to authenticate against AWS if not set aws sdk will infer credentials from your environment see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials"
        },
        "externalID": {
          "description": "AWS External ID set on assumed IAM roles",
          "type": "string"
        },
        "prefix": {
          "description": "Prefix adds a prefix to all retrieved values.",
          "type": "string"
        },
        "region": {
          "default": "",
          "description": "AWS Region to be used for the provider",
          "type": "string"
        },
        "role": {
          "description": "Role is a Role ARN which the provider will assume",
          "type": "string"
        },
        "secretsManager": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretsManager",
          "description": "SecretsManager defines how the provider behaves when interacting with AWS SecretsManager"
        },
        "service": {
          "default": "",
          "description": "Service defines which service should be used to fetch the secrets",
          "type": "string"
        },
        "sessionTags": {
          "description": "AWS STS assume role session tags",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Tag"
          },
          "type": "array"
        },
        "transitiveTagKeys": {
          "description": "AWS STS assume role transitive session tags. Required when multiple rules are used with the provider",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "service",
        "region"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessAuth": {
      "additionalProperties": false,
      "properties": {
        "kubernetesAuth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessKubernetesAuth",
          "description": "Kubernetes authenticates with Akeyless by passing the ServiceAccount token stored in the named Secret resource."
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessAuthSecretRef",
          "default": {},
          "description": "Reference to a Secret that contains the details to authenticate with Akeyless."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessAuthSecretRef": {
      "additionalProperties": false,
      "description": "AkeylessAuthSecretRef AKEYLESS_ACCESS_TYPE_PARAM: AZURE_OBJ_ID OR GCP_AUDIENCE OR ACCESS_KEY OR KUB_CONFIG_NAME.",
      "properties": {
        "accessID": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessID is used for authentication"
        },
        "accessType": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "accessTypeParam": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessKubernetesAuth": {
      "additionalProperties": false,
      "description": "Authenticate with Kubernetes ServiceAccount token stored.",
      "properties": {
        "accessID": {
          "default": "",
          "description": "the Akeyless Kubernetes auth-method access-id",
          "type": "string"
        },
        "k8sConfName": {
          "default": "",
          "description": "Kubernetes-auth configuration name in Akeyless-Gateway",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "Optional secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Akeyless. If a name is specified without a key, `token` is the default. If one is not specified, the one bound to the controller will be used."
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "Optional service account field containing the name of a kubernetes ServiceAccount. If the service account is specified, the service account secret token JWT will be used for authenticating with Akeyless. If the service account selector is not supplied, the secretRef will be used instead."
        }
      },
      "required": [
        "accessID",
        "k8sConfName"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AkeylessProvider": {
      "additionalProperties": false,
      "description": "AkeylessProvider Configures an store to sync secrets using Akeyless KV.",
      "properties": {
        "akeylessGWApiURL": {
          "description": "Akeyless GW API Url from which the secrets to be fetched from.",
          "type": "string"
        },
        "authSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessAuth",
          "description": "Auth configures how the operator authenticates with Akeyless."
        },
        "caBundle": {
          "description": "PEM/base64 encoded CA bundle used to validate Akeyless Gateway certificate. Only used if the AkeylessGWApiURL URL is using HTTPS protocol. If not set the system root certificates are used to validate the TLS connection.",
          "format": "byte",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider",
          "description": "The provider for the CA bundle to use to validate Akeyless Gateway certificate."
        }
      },
      "required": [
        "akeylessGWApiURL",
        "authSecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaAuth": {
      "additionalProperties": false,
      "description": "AlibabaAuth contains a secretRef for credentials.",
      "properties": {
        "rrsa": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaRRSAAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaAuthSecretRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaAuthSecretRef": {
      "additionalProperties": false,
      "description": "AlibabaAuthSecretRef holds secret references for Alibaba credentials.",
      "properties": {
        "accessKeyIDSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeyID is used for authentication"
        },
        "accessKeySecretSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeySecret is used for authentication"
        }
      },
      "required": [
        "accessKeyIDSecretRef",
        "accessKeySecretSecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaProvider": {
      "additionalProperties": false,
      "description": "AlibabaProvider configures a store to sync secrets using the Alibaba Secret Manager provider.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaAuth",
          "default": {}
        },
        "regionID": {
          "default": "",
          "description": "Alibaba Region to be used for the provider",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "regionID"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AlibabaRRSAAuth": {
      "additionalProperties": false,
      "description": "Authenticate against Alibaba using RRSA.",
      "properties": {
        "oidcProviderArn": {
          "default": "",
          "type": "string"
        },
        "oidcTokenFilePath": {
          "default": "",
          "type": "string"
        },
        "roleArn": {
          "default": "",
          "type": "string"
        },
        "sessionName": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "oidcProviderArn",
        "oidcTokenFilePath",
        "roleArn",
        "sessionName"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AuthorizationProtocol": {
      "additionalProperties": false,
      "description": "AuthorizationProtocol contains the protocol-specific configuration",
      "properties": {
        "ntlm": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.NTLMProtocol",
          "description": "NTLMProtocol configures the store to use NTLM for auth"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AzureAuthCredentials": {
      "additionalProperties": false,
      "properties": {
        "identityId": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "resource": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "identityId"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AzureKVAuth": {
      "additionalProperties": false,
      "description": "Configuration used to authenticate with Azure.",
      "properties": {
        "clientCertificate": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The Azure ClientCertificate of the service principle used for authentication."
        },
        "clientId": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The Azure clientId of the service principle or managed identity used for authentication."
        },
        "clientSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The Azure ClientSecret of the service principle used for authentication."
        },
        "tenantId": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The Azure tenantId of the managed identity used for authentication."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.AzureKVProvider": {
      "additionalProperties": false,
      "description": "Configures an store to sync secrets using Azure KV.",
      "properties": {
        "authSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AzureKVAuth",
          "description": "Auth configures how the operator authenticates with Azure. Required for ServicePrincipal auth type. Optional for WorkloadIdentity."
        },
        "authType": {
          "description": "Auth type defines how to authenticate to the keyvault service. Valid values are: - \"ServicePrincipal\" (default): Using a service principal (tenantId, clientId, clientSecret) - \"ManagedIdentity\": Using Managed Identity assigned to the pod (see aad-pod-identity)",
          "type": "string"
        },
        "environmentType": {
          "description": "EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud",
          "type": "string"
        },
        "identityId": {
          "description": "If multiple Managed Identity is assigned to the pod, you can select the one to be used",
          "type": "string"
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity."
        },
        "tenantId": {
          "description": "TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type. Optional for WorkloadIdentity.",
          "type": "string"
        },
        "vaultUrl": {
          "description": "Vault Url from which the secrets to be fetched from.",
          "type": "string"
        }
      },
      "required": [
        "vaultUrl"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "SecretRef references a key in a secret that will be used as value."
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondtrustAuth": {
      "additionalProperties": false,
      "description": "Configures a store to sync secrets using BeyondTrust Password Safe.",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef",
          "description": "APIKey If not provided then ClientID/ClientSecret become required."
        },
        "certificate": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef",
          "description": "Certificate (cert.pem) for use when authenticating with an OAuth client Id using a Client Certificate."
        },
        "certificateKey": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef",
          "description": "Certificate private key (key.pem). For use when authenticating with an OAuth client Id"
        },
        "clientId": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef",
          "description": "ClientID is the API OAuth Client ID."
        },
        "clientSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondTrustProviderSecretRef",
          "description": "ClientSecret is the API OAuth Client Secret."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondtrustProvider": {
      "additionalProperties": false,
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondtrustAuth",
          "description": "Auth configures how the operator authenticates with Beyondtrust."
        },
        "server": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondtrustServer",
          "description": "Auth configures how API server works."
        }
      },
      "required": [
        "auth",
        "server"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BeyondtrustServer": {
      "additionalProperties": false,
      "description": "Configures a store to sync secrets using BeyondTrust Password Safe.",
      "properties": {
        "apiUrl": {
          "default": "",
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "clientTimeOutSeconds": {
          "description": "Timeout specifies a time limit for requests made by this Client. The timeout includes connection time, any redirects, and reading the response body. Defaults to 45 seconds.",
          "format": "int32",
          "type": "integer"
        },
        "retrievalType": {
          "description": "The secret retrieval type. SECRET = Secrets Safe (credential, text, file). MANAGED_ACCOUNT = Password Safe account associated with a system.",
          "type": "string"
        },
        "separator": {
          "description": "A character that separates the folder names.",
          "type": "string"
        },
        "verifyCA": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "apiUrl",
        "verifyCA"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerAuth": {
      "additionalProperties": false,
      "description": "BitwardenSecretsManagerAuth contains the ref to the secret that contains the machine account token.",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerSecretRef",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerProvider": {
      "additionalProperties": false,
      "description": "BitwardenSecretsManagerProvider configures a store to sync secrets with a Bitwarden Secrets Manager instance.",
      "properties": {
        "apiURL": {
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerAuth",
          "default": {},
          "description": "Auth configures how secret-manager authenticates with a bitwarden machine account instance. Make sure that the token being used has permissions on the given secret."
        },
        "bitwardenServerSDKURL": {
          "type": "string"
        },
        "caBundle": {
          "description": "Base64 encoded certificate for the bitwarden server sdk. The sdk MUST run with HTTPS to make sure no MITM attack can be performed.",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider",
          "description": "see: https://external-secrets.io/latest/spec/#external-secrets.io/v1alpha1.CAProvider"
        },
        "identityURL": {
          "type": "string"
        },
        "organizationID": {
          "default": "",
          "description": "OrganizationID determines which organization this secret store manages.",
          "type": "string"
        },
        "projectID": {
          "default": "",
          "description": "ProjectID determines which project this secret store manages.",
          "type": "string"
        }
      },
      "required": [
        "organizationID",
        "projectID",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerSecretRef": {
      "additionalProperties": false,
      "description": "BitwardenSecretsManagerSecretRef contains the credential ref to the bitwarden instance.",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "AccessToken used for the bitwarden instance."
        }
      },
      "required": [
        "credentials"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.CAProvider": {
      "additionalProperties": false,
      "description": "Used to provide custom certificate authority (CA) certificates for a secret store. The CAProvider points to a Secret or ConfigMap resource that contains a PEM-encoded certificate.",
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the object located at the provider type.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace the Provider type is in. Can only be defined when used in a ClusterSecretStore.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.CSMAuth": {
      "additionalProperties": false,
      "description": "CSMAuth contains a secretRef for credentials.",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CSMAuthSecretRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.CSMAuthSecretRef": {
      "additionalProperties": false,
      "description": "CSMAuthSecretRef holds secret references for Cloud.ru credentials.",
      "properties": {
        "accessKeyIDSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeyID is used for authentication"
        },
        "accessKeySecretSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeySecret is used for authentication"
        }
      },
      "required": [
        "accessKeyIDSecretRef",
        "accessKeySecretSecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.CertAuth": {
      "additionalProperties": false,
      "properties": {
        "clientCert": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "clientKey": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ChefAuth": {
      "additionalProperties": false,
      "description": "ChefAuth contains a secretRef for credentials.",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ChefAuthSecretRef",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ChefAuthSecretRef": {
      "additionalProperties": false,
      "description": "ChefAuthSecretRef holds secret references for chef server login credentials.",
      "properties": {
        "privateKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "SecretKey is the Signing Key in PEM format, used for authentication."
        }
      },
      "required": [
        "privateKeySecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ChefProvider": {
      "additionalProperties": false,
      "description": "ChefProvider configures a store to sync secrets using basic chef server connection credentials.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ChefAuth",
          "description": "Auth defines the information necessary to authenticate against chef Server"
        },
        "serverUrl": {
          "default": "",
          "description": "ServerURL is the chef server URL used to connect to. If using orgs you should include your org in the url and terminate the url with a \"/\"",
          "type": "string"
        },
        "username": {
          "default": "",
          "description": "UserName should be the user ID on the chef server",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "username",
        "serverUrl"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.CloudruSMProvider": {
      "additionalProperties": false,
      "description": "CloudruSMProvider configures a store to sync secrets using the Cloud.ru Secret Manager provider.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CSMAuth",
          "default": {}
        },
        "projectID": {
          "description": "ProjectID is the project, which the secrets are stored in.",
          "type": "string"
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretSpec": {
      "additionalProperties": false,
      "description": "ClusterExternalSecretSpec defines the desired state of ClusterExternalSecret.",
      "properties": {
        "externalSecretMetadata": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretMetadata",
          "default": {},
          "description": "The metadata of the external secrets to be created"
        },
        "externalSecretName": {
          "description": "The name of the external secrets to be created. Defaults to the name of the ClusterExternalSecret",
          "type": "string"
        },
        "externalSecretSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretSpec",
          "default": {},
          "description": "The spec for the ExternalSecrets to be created"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The labels to select by to find the Namespaces to create the ExternalSecrets in. Deprecated: Use NamespaceSelectors instead."
        },
        "namespaceSelectors": {
          "description": "A list of labels to select by to find the Namespaces to create the ExternalSecrets in. The selectors are ORed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "type": "array"
        },
        "namespaces": {
          "description": "Choose namespaces by name. This field is ORed with anything that NamespaceSelectors ends up choosing. Deprecated: Use NamespaceSelectors instead.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "refreshTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration",
          "description": "The time in which the controller should reconcile its objects and recheck namespaces for labels."
        }
      },
      "required": [
        "externalSecretSpec"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ClusterSecretStoreCondition": {
      "additionalProperties": false,
      "description": "ClusterSecretStoreCondition describes a condition by which to choose namespaces to process ExternalSecrets in for a ClusterSecretStore instance.",
      "properties": {
        "namespaceRegexes": {
          "description": "Choose namespaces by using regex matching",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Choose namespace using a labelSelector"
        },
        "namespaces": {
          "description": "Choose namespaces by name",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurAPIKey": {
      "additionalProperties": false,
      "properties": {
        "account": {
          "default": "",
          "description": "Account is the Conjur organization account name.",
          "type": "string"
        },
        "apiKeyRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "A reference to a specific 'key' containing the Conjur API key within a Secret resource. In some instances, `key` is a required field."
        },
        "userRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "A reference to a specific 'key' containing the Conjur username within a Secret resource. In some instances, `key` is a required field."
        }
      },
      "required": [
        "account",
        "userRef",
        "apiKeyRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurAuth": {
      "additionalProperties": false,
      "properties": {
        "apikey": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurAPIKey",
          "description": "Authenticates with Conjur using an API key."
        },
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurJWT",
          "description": "Jwt enables JWT authentication using Kubernetes service account tokens."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurJWT": {
      "additionalProperties": false,
      "properties": {
        "account": {
          "default": "",
          "description": "Account is the Conjur organization account name.",
          "type": "string"
        },
        "hostId": {
          "default": "",
          "description": "Optional HostID for JWT authentication. This may be used depending on how the Conjur JWT authenticator policy is configured.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "Optional SecretRef that refers to a key in a Secret resource containing JWT token to authenticate with Conjur using the JWT authentication method."
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "Optional ServiceAccountRef specifies the Kubernetes service account for which to request a token for with the `TokenRequest` API."
        },
        "serviceID": {
          "default": "",
          "description": "The conjur authn jwt webservice id",
          "type": "string"
        }
      },
      "required": [
        "account",
        "serviceID"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ConjurProvider": {
      "additionalProperties": false,
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurAuth",
          "default": {},
          "description": "Defines authentication settings for connecting to Conjur."
        },
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle that will be used to validate the Conjur server certificate.",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider",
          "description": "Used to provide custom certificate authority (CA) certificates for a secret store. The CAProvider points to a Secret or ConfigMap resource that contains a PEM-encoded certificate."
        },
        "url": {
          "default": "",
          "description": "URL is the endpoint of the Conjur instance.",
          "type": "string"
        }
      },
      "required": [
        "url",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.DelineaProvider": {
      "additionalProperties": false,
      "description": "See https://github.com/DelineaXPM/dsv-sdk-go/blob/main/vault/vault.go.",
      "properties": {
        "clientId": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DelineaProviderSecretRef",
          "description": "ClientID is the non-secret part of the credential."
        },
        "clientSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DelineaProviderSecretRef",
          "description": "ClientSecret is the secret part of the credential."
        },
        "tenant": {
          "default": "",
          "description": "Tenant is the chosen hostname / site name.",
          "type": "string"
        },
        "tld": {
          "description": "TLD is based on the server location that was chosen during provisioning. If unset, defaults to \"com\".",
          "type": "string"
        },
        "urlTemplate": {
          "description": "URLTemplate If unset, defaults to \"https://%s.secretsvaultcloud.%s/v1/%s%s\".",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "tenant"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.DelineaProviderSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "SecretRef references a key in a secret that will be used as value."
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.Device42Auth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Device42SecretRef",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.Device42Provider": {
      "additionalProperties": false,
      "description": "Device42Provider configures a store to sync secrets with a Device42 instance.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Device42Auth",
          "default": {},
          "description": "Auth configures how secret-manager authenticates with a Device42 instance."
        },
        "host": {
          "default": "",
          "description": "URL configures the Device42 instance URL.",
          "type": "string"
        }
      },
      "required": [
        "host",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.Device42SecretRef": {
      "additionalProperties": false,
      "properties": {
        "credentials": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "Username / Password is used for authentication."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.DopplerAuth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DopplerAuthSecretRef",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.DopplerAuthSecretRef": {
      "additionalProperties": false,
      "properties": {
        "dopplerToken": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The DopplerToken is used for authentication. See https://docs.doppler.com/reference/api#authentication for auth token types. The Key attribute defaults to dopplerToken if not specified."
        }
      },
      "required": [
        "dopplerToken"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.DopplerProvider": {
      "additionalProperties": false,
      "description": "DopplerProvider configures a store to sync secrets using the Doppler provider. Project and Config are required if not using a Service Token.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DopplerAuth",
          "description": "Auth configures how the Operator authenticates with the Doppler API"
        },
        "config": {
          "description": "Doppler config (required if not using a Service Token)",
          "type": "string"
        },
        "format": {
          "description": "Format enables the downloading of secrets as a file (string)",
          "type": "string"
        },
        "nameTransformer": {
          "description": "Environment variable compatible name transforms that change secret names to a different format",
          "type": "string"
        },
        "project": {
          "description": "Doppler project (required if not using a Service Token)",
          "type": "string"
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretData": {
      "additionalProperties": false,
      "description": "ExternalSecretData defines the connection between the Kubernetes Secret key (spec.data.\u003ckey\u003e) and the Provider data.",
      "properties": {
        "remoteRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataRemoteRef",
          "default": {},
          "description": "RemoteRef points to the remote secret and defines which secret (version/property/..) to fetch."
        },
        "secretKey": {
          "default": "",
          "description": "The key in the Kubernetes Secret to store the value.",
          "type": "string"
        },
        "sourceRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.StoreSourceRef",
          "description": "SourceRef allows you to override the source from which the value will be pulled."
        }
      },
      "required": [
        "secretKey",
        "remoteRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataFromRemoteRef": {
      "additionalProperties": false,
      "properties": {
        "extract": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataRemoteRef",
          "description": "Used to extract multiple key/value pairs from one secret Note: Extract does not support sourceRef.Generator or sourceRef.GeneratorRef."
        },
        "find": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretFind",
          "description": "Used to find secrets based on tags or regular expressions Note: Find does not support sourceRef.Generator or sourceRef.GeneratorRef."
        },
        "rewrite": {
          "description": "Used to rewrite secret Keys after getting them from the secret Provider Multiple Rewrite operations can be provided. They are applied in a layered order (first to last)",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewrite",
            "default": {}
          },
          "type": "array"
        },
        "sourceRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.StoreGeneratorSourceRef",
          "description": "SourceRef points to a store or generator which contains secret values ready to use. Use this in combination with Extract or Find pull values out of a specific SecretStore. When sourceRef points to a generator Extract or Find is not supported. The generator returns a static map of values"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataRemoteRef": {
      "additionalProperties": false,
      "description": "ExternalSecretDataRemoteRef defines Provider data location.",
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy",
          "type": "string"
        },
        "decodingStrategy": {
          "description": "Used to define a decoding Strategy",
          "type": "string"
        },
        "key": {
          "default": "",
          "description": "Key is the key used in the Provider, mandatory",
          "type": "string"
        },
        "metadataPolicy": {
          "description": "Policy for fetching tags/labels from provider secrets, possible options are Fetch, None. Defaults to None",
          "type": "string"
        },
        "property": {
          "description": "Used to select a specific property of the Provider value (if a map), if supported",
          "type": "string"
        },
        "version": {
          "description": "Used to select a specific version of the Provider value, if supported",
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretFind": {
      "additionalProperties": false,
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy",
          "type": "string"
        },
        "decodingStrategy": {
          "description": "Used to define a decoding Strategy",
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FindName",
          "description": "Finds secrets based on the name."
        },
        "path": {
          "description": "A root path to start the find operations.",
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Find secrets based on tags.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretMetadata": {
      "additionalProperties": false,
      "description": "ExternalSecretMetadata defines metadata fields for the ExternalSecret generated by the ClusterExternalSecret.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewrite": {
      "additionalProperties": false,
      "properties": {
        "merge": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteMerge",
          "description": "Used to merge key/values in one single Secret The resulting key will contain all values from the specified secrets"
        },
        "regexp": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteRegexp",
          "description": "Used to rewrite with regular expressions. The resulting key will be the output of a regexp.ReplaceAll operation."
        },
        "transform": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteTransform",
          "description": "Used to apply string transformation on the secrets. The resulting key will be the output of the template applied by the operation."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteMerge": {
      "additionalProperties": false,
      "properties": {
        "conflictPolicy": {
          "description": "Used to define the policy to use in conflict resolution.",
          "type": "string"
        },
        "into": {
          "description": "Used to define the target key of the merge operation. Required if strategy is JSON. Ignored otherwise.",
          "type": "string"
        },
        "priority": {
          "description": "Used to define key priority in conflict resolution.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "strategy": {
          "description": "Used to define the strategy to use in the merge operation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteRegexp": {
      "additionalProperties": false,
      "properties": {
        "source": {
          "default": "",
          "description": "Used to define the regular expression of a re.Compiler.",
          "type": "string"
        },
        "target": {
          "default": "",
          "description": "Used to define the target pattern of a ReplaceAll operation.",
          "type": "string"
        }
      },
      "required": [
        "source",
        "target"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretRewriteTransform": {
      "additionalProperties": false,
      "properties": {
        "template": {
          "default": "",
          "description": "Used to define the template to apply on the secret name. `.value ` will specify the secret name in the template.",
          "type": "string"
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretSpec": {
      "additionalProperties": false,
      "description": "ExternalSecretSpec defines the desired state of ExternalSecret.",
      "properties": {
        "data": {
          "description": "Data defines the connection between the Kubernetes Secret keys and the Provider data",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretData",
            "default": {}
          },
          "type": "array"
        },
        "dataFrom": {
          "description": "DataFrom is used to fetch all properties from a specific Provider data If multiple entries are specified, the Secret keys are merged in the specified order",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretDataFromRemoteRef",
            "default": {}
          },
          "type": "array"
        },
        "refreshInterval": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration",
          "description": "RefreshInterval is the amount of time before the values are read again from the SecretStore provider, specified as Golang Duration strings. Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\" Example values: \"1h\", \"2h30m\", \"10s\" May be set to zero to fetch and create it once. Defaults to 1h."
        },
        "refreshPolicy": {
          "description": "RefreshPolicy determines how the ExternalSecret should be refreshed: - CreatedOnce: Creates the Secret only if it does not exist and does not update it thereafter - Periodic: Synchronizes the Secret from the external source at regular intervals specified by refreshInterval.\n  No periodic updates occur if refreshInterval is 0.\n- OnChange: Only synchronizes the Secret when the ExternalSecret's metadata or specification changes",
          "type": "string"
        },
        "secretStoreRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRef",
          "default": {}
        },
        "target": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTarget",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretTarget": {
      "additionalProperties": false,
      "description": "ExternalSecretTarget defines the Kubernetes Secret to be created There can be only one target per ExternalSecret.",
      "properties": {
        "creationPolicy": {
          "description": "CreationPolicy defines rules on how to create the resulting Secret. Defaults to \"Owner\"",
          "type": "string"
        },
        "deletionPolicy": {
          "description": "DeletionPolicy defines rules on how to delete the resulting Secret. Defaults to \"Retain\"",
          "type": "string"
        },
        "immutable": {
          "description": "Immutable defines if the final secret will be immutable",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the Secret resource to be managed. Defaults to the .metadata.name of the ExternalSecret resource",
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplate",
          "description": "Template defines a blueprint for the created Secret resource."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplate": {
      "additionalProperties": false,
      "description": "ExternalSecretTemplate defines a blueprint for the created Secret resource. we can not use native corev1.Secret, it will have empty ObjectMeta values: https://github.com/kubernetes-sigs/controller-tools/issues/448",
      "properties": {
        "data": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        },
        "engineVersion": {
          "description": "EngineVersion specifies the template engine version that should be used to compile/execute the template specified in .data and .templateFrom[].",
          "type": "string"
        },
        "mergePolicy": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplateMetadata",
          "default": {}
        },
        "templateFrom": {
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateFrom",
            "default": {}
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplateMetadata": {
      "additionalProperties": false,
      "description": "ExternalSecretTemplateMetadata defines metadata fields for the Secret blueprint.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.FakeProvider": {
      "additionalProperties": false,
      "description": "FakeProvider configures a fake provider that returns static values.",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FakeProviderData",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.FakeProviderData": {
      "additionalProperties": false,
      "properties": {
        "key": {
          "default": "",
          "type": "string"
        },
        "value": {
          "default": "",
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.FindName": {
      "additionalProperties": false,
      "properties": {
        "regexp": {
          "description": "Finds secrets base",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.FortanixProvider": {
      "additionalProperties": false,
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FortanixProviderSecretRef",
          "description": "APIKey is the API token to access SDKMS Applications."
        },
        "apiUrl": {
          "description": "APIURL is the URL of SDKMS API. Defaults to `sdkms.fortanix.com`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.FortanixProviderSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "SecretRef is a reference to a secret containing the SDKMS API Key."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPSMAuth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPSMAuthSecretRef"
        },
        "workloadIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPWorkloadIdentity"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPSMAuthSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretAccessKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessKey is used for authentication"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPSMProvider": {
      "additionalProperties": false,
      "description": "GCPSMProvider Configures a store to sync secrets using the GCP Secret Manager provider.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPSMAuth",
          "default": {},
          "description": "Auth defines the information necessary to authenticate against GCP"
        },
        "location": {
          "description": "Location optionally defines a location for a secret",
          "type": "string"
        },
        "projectID": {
          "description": "ProjectID project where secret is located",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GCPWorkloadIdentity": {
      "additionalProperties": false,
      "properties": {
        "clusterLocation": {
          "description": "ClusterLocation is the location of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "clusterName": {
          "description": "ClusterName is the name of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "clusterProjectID": {
          "description": "ClusterProjectID is the project ID of the cluster If not specified, it fetches information from the metadata server",
          "type": "string"
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "default": {}
        }
      },
      "required": [
        "serviceAccountRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GeneratorRef": {
      "additionalProperties": false,
      "description": "GeneratorRef points to a generator custom resource.",
      "properties": {
        "apiVersion": {
          "description": "Specify the apiVersion of the generator resource",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Specify the Kind of the generator resource",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Specify the name of the generator resource",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GithubAppAuth": {
      "additionalProperties": false,
      "properties": {
        "privateKey": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "privateKey"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GithubProvider": {
      "additionalProperties": false,
      "description": "Configures a store to push secrets to Github Actions.",
      "properties": {
        "appID": {
          "default": 0,
          "description": "appID specifies the Github APP that will be used to authenticate the client",
          "format": "int64",
          "type": "integer"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GithubAppAuth",
          "default": {},
          "description": "auth configures how secret-manager authenticates with a Github instance."
        },
        "environment": {
          "description": "environment will be used to fetch secrets from a particular environment within a github repository",
          "type": "string"
        },
        "installationID": {
          "default": 0,
          "description": "installationID specifies the Github APP installation that will be used to authenticate the client",
          "format": "int64",
          "type": "integer"
        },
        "organization": {
          "default": "",
          "description": "organization will be used to fetch secrets from the Github organization",
          "type": "string"
        },
        "repository": {
          "description": "repository will be used to fetch secrets from the Github repository within an organization",
          "type": "string"
        },
        "uploadURL": {
          "description": "Upload URL for enterprise instances. Default to URL.",
          "type": "string"
        },
        "url": {
          "description": "URL configures the Github instance URL. Defaults to https://github.com/.",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "appID",
        "installationID",
        "organization"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GitlabAuth": {
      "additionalProperties": false,
      "properties": {
        "SecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GitlabSecretRef",
          "default": {}
        }
      },
      "required": [
        "SecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GitlabProvider": {
      "additionalProperties": false,
      "description": "Configures a store to sync secrets with a GitLab instance.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GitlabAuth",
          "default": {},
          "description": "Auth configures how secret-manager authenticates with a GitLab instance."
        },
        "caBundle": {
          "description": "Base64 encoded certificate for the GitLab server sdk. The sdk MUST run with HTTPS to make sure no MITM attack can be performed.",
          "format": "byte",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider",
          "description": "see: https://external-secrets.io/latest/spec/#external-secrets.io/v1alpha1.CAProvider"
        },
        "environment": {
          "description": "Environment environment_scope of gitlab CI/CD variables (Please see https://docs.gitlab.com/ee/ci/environments/#create-a-static-environment on how to create environments)",
          "type": "string"
        },
        "groupIDs": {
          "description": "GroupIDs specify, which gitlab groups to pull secrets from. Group secrets are read from left to right followed by the project variables.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "inheritFromGroups": {
          "description": "InheritFromGroups specifies whether parent groups should be discovered and checked for secrets.",
          "type": "boolean"
        },
        "projectID": {
          "description": "ProjectID specifies a project where secrets are located.",
          "type": "string"
        },
        "url": {
          "description": "URL configures the GitLab instance URL. Defaults to https://gitlab.com/.",
          "type": "string"
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.GitlabSecretRef": {
      "additionalProperties": false,
      "properties": {
        "accessToken": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "AccessToken is used for authentication."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMAuth": {
      "additionalProperties": false,
      "properties": {
        "containerAuth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMAuthContainerAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMAuthSecretRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMAuthContainerAuth": {
      "additionalProperties": false,
      "description": "IBM Container-based auth with IAM Trusted Profile.",
      "properties": {
        "iamEndpoint": {
          "type": "string"
        },
        "profile": {
          "default": "",
          "description": "the IBM Trusted Profile",
          "type": "string"
        },
        "tokenLocation": {
          "description": "Location the token is mounted on the pod",
          "type": "string"
        }
      },
      "required": [
        "profile"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMAuthSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretApiKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessKey is used for authentication"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.IBMProvider": {
      "additionalProperties": false,
      "description": "Configures an store to sync secrets using a IBM Cloud Secrets Manager backend.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMAuth",
          "default": {},
          "description": "Auth configures how secret-manager authenticates with the IBM secrets manager."
        },
        "serviceUrl": {
          "description": "ServiceURL is the Endpoint URL that is specific to the Secrets Manager service instance",
          "type": "string"
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.InfisicalAuth": {
      "additionalProperties": false,
      "properties": {
        "azureAuthCredentials": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AzureAuthCredentials"
        },
        "universalAuthCredentials": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.UniversalAuthCredentials"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.InfisicalProvider": {
      "additionalProperties": false,
      "description": "InfisicalProvider configures a store to sync secrets using the Infisical provider.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.InfisicalAuth",
          "default": {},
          "description": "Auth configures how the Operator authenticates with the Infisical API"
        },
        "hostAPI": {
          "description": "HostAPI specifies the base URL of the Infisical API. If not provided, it defaults to \"https://app.infisical.com/api\".",
          "type": "string"
        },
        "secretsScope": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.MachineIdentityScopeInWorkspace",
          "default": {},
          "description": "SecretsScope defines the scope of the secrets within the workspace"
        }
      },
      "required": [
        "auth",
        "secretsScope"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.IntegrationInfo": {
      "additionalProperties": false,
      "description": "IntegrationInfo specifies the name and version of the integration built using the 1Password Go SDK.",
      "properties": {
        "name": {
          "description": "Name defaults to \"1Password SDK\".",
          "type": "string"
        },
        "version": {
          "description": "Version defaults to \"v1.0.0\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.KeeperSecurityProvider": {
      "additionalProperties": false,
      "description": "KeeperSecurityProvider Configures a store to sync secrets using Keeper Security.",
      "properties": {
        "authRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "folderID": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "authRef",
        "folderID"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.KubernetesAuth": {
      "additionalProperties": false,
      "properties": {
        "cert": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CertAuth",
          "description": "has both clientCert and clientKey as secretKeySelector"
        },
        "serviceAccount": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "points to a service account that should be used for authentication"
        },
        "token": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TokenAuth",
          "description": "use static token to authenticate with"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.KubernetesProvider": {
      "additionalProperties": false,
      "description": "Configures a store to sync secrets with a Kubernetes instance.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KubernetesAuth",
          "default": {},
          "description": "Auth configures how secret-manager authenticates with a Kubernetes instance."
        },
        "authRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "A reference to a secret that contains the auth information."
        },
        "remoteNamespace": {
          "description": "Remote namespace to fetch the secrets from",
          "type": "string"
        },
        "server": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KubernetesServer",
          "default": {},
          "description": "configures the Kubernetes server Address."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.KubernetesServer": {
      "additionalProperties": false,
      "properties": {
        "caBundle": {
          "description": "CABundle is a base64-encoded CA certificate",
          "format": "byte",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider",
          "description": "see: https://external-secrets.io/v0.4.1/spec/#external-secrets.io/v1alpha1.CAProvider"
        },
        "url": {
          "description": "configures the Kubernetes server Address.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.MachineIdentityScopeInWorkspace": {
      "additionalProperties": false,
      "properties": {
        "environmentSlug": {
          "default": "",
          "description": "EnvironmentSlug is the required slug identifier for the environment.",
          "type": "string"
        },
        "expandSecretReferences": {
          "description": "ExpandSecretReferences indicates whether secret references should be expanded. Defaults to true if not provided.",
          "type": "boolean"
        },
        "projectSlug": {
          "default": "",
          "description": "ProjectSlug is the required slug identifier for the project.",
          "type": "string"
        },
        "recursive": {
          "description": "Recursive indicates whether the secrets should be fetched recursively. Defaults to false if not provided.",
          "type": "boolean"
        },
        "secretsPath": {
          "description": "SecretsPath specifies the path to the secrets within the workspace. Defaults to \"/\" if not provided.",
          "type": "string"
        }
      },
      "required": [
        "environmentSlug",
        "projectSlug"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.NTLMProtocol": {
      "additionalProperties": false,
      "description": "NTLMProtocol contains the NTLM-specific configuration.",
      "properties": {
        "passwordSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "usernameSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "usernameSecret",
        "passwordSecret"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnboardbaseAuthSecretRef": {
      "additionalProperties": false,
      "description": "OnboardbaseAuthSecretRef holds secret references for onboardbase API Key credentials.",
      "properties": {
        "apiKeyRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "OnboardbaseAPIKey is the APIKey generated by an admin account. It is used to recognize and authorize access to a project and environment within onboardbase"
        },
        "passcodeRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "OnboardbasePasscode is the passcode attached to the API Key"
        }
      },
      "required": [
        "apiKeyRef",
        "passcodeRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnboardbaseProvider": {
      "additionalProperties": false,
      "description": "OnboardbaseProvider configures a store to sync secrets using the Onboardbase provider. Project and Config are required if not using a Service Token.",
      "properties": {
        "apiHost": {
          "default": "",
          "description": "APIHost use this to configure the host url for the API for selfhosted installation, default is https://public.onboardbase.com/api/v1/",
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnboardbaseAuthSecretRef",
          "description": "Auth configures how the Operator authenticates with the Onboardbase API"
        },
        "environment": {
          "default": "",
          "description": "Environment is the name of an environmnent within a project to pull the secrets from",
          "type": "string"
        },
        "project": {
          "default": "",
          "description": "Project is an onboardbase project that the secrets should be pulled from",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "apiHost",
        "project",
        "environment"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordAuth": {
      "additionalProperties": false,
      "description": "OnePasswordAuth contains a secretRef for credentials.",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordAuthSecretRef"
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordAuthSecretRef": {
      "additionalProperties": false,
      "description": "OnePasswordAuthSecretRef holds secret references for 1Password credentials.",
      "properties": {
        "connectTokenSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The ConnectToken is used for authentication to a 1Password Connect Server."
        }
      },
      "required": [
        "connectTokenSecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordProvider": {
      "additionalProperties": false,
      "description": "OnePasswordProvider configures a store to sync secrets using the 1Password Secret Manager provider.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordAuth",
          "description": "Auth defines the information necessary to authenticate against OnePassword Connect Server"
        },
        "connectHost": {
          "default": "",
          "description": "ConnectHost defines the OnePassword Connect Server to connect to",
          "type": "string"
        },
        "vaults": {
          "additionalProperties": {
            "default": 0,
            "format": "int32",
            "type": "integer"
          },
          "description": "Vaults defines which OnePassword vaults to search in which order",
          "type": "object"
        }
      },
      "required": [
        "auth",
        "connectHost",
        "vaults"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKAuth": {
      "additionalProperties": false,
      "description": "OnePasswordSDKAuth contains a secretRef for the service account token.",
      "properties": {
        "serviceAccountSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "ServiceAccountSecretRef points to the secret containing the token to access 1Password vault."
        }
      },
      "required": [
        "serviceAccountSecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKProvider": {
      "additionalProperties": false,
      "description": "OnePasswordSDKProvider configures a store to sync secrets using the 1Password sdk.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKAuth",
          "description": "Auth defines the information necessary to authenticate against OnePassword API."
        },
        "integrationInfo": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IntegrationInfo",
          "description": "IntegrationInfo specifies the name and version of the integration built using the 1Password Go SDK. If you don't know which name and version to use, use `DefaultIntegrationName` and `DefaultIntegrationVersion`, respectively."
        },
        "vault": {
          "default": "",
          "description": "Vault defines the vault's name or uuid to access. Do NOT add op:// prefix. This will be done automatically.",
          "type": "string"
        }
      },
      "required": [
        "vault",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OracleAuth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OracleSecretRef",
          "default": {},
          "description": "SecretRef to pass through sensitive information."
        },
        "tenancy": {
          "default": "",
          "description": "Tenancy is the tenancy OCID where user is located.",
          "type": "string"
        },
        "user": {
          "default": "",
          "description": "User is an access OCID specific to the account.",
          "type": "string"
        }
      },
      "required": [
        "tenancy",
        "user",
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OracleProvider": {
      "additionalProperties": false,
      "description": "Configures an store to sync secrets using a Oracle Vault backend.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OracleAuth",
          "description": "Auth configures how secret-manager authenticates with the Oracle Vault. If empty, use the instance principal, otherwise the user credentials specified in Auth."
        },
        "compartment": {
          "description": "Compartment is the vault compartment OCID. Required for PushSecret",
          "type": "string"
        },
        "encryptionKey": {
          "description": "EncryptionKey is the OCID of the encryption key within the vault. Required for PushSecret",
          "type": "string"
        },
        "principalType": {
          "description": "The type of principal to use for authentication. If left blank, the Auth struct will determine the principal type. This optional field must be specified if using workload identity.",
          "type": "string"
        },
        "region": {
          "default": "",
          "description": "Region is the region where vault is located.",
          "type": "string"
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity."
        },
        "vault": {
          "default": "",
          "description": "Vault is the vault's OCID of the specific vault where secret is located.",
          "type": "string"
        }
      },
      "required": [
        "region",
        "vault"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.OracleSecretRef": {
      "additionalProperties": false,
      "properties": {
        "fingerprint": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "Fingerprint is the fingerprint of the API private key."
        },
        "privatekey": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "PrivateKey is the user's API Signing Key in PEM format, used for authentication."
        }
      },
      "required": [
        "privatekey",
        "fingerprint"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PassboltAuth": {
      "additionalProperties": false,
      "description": "Passbolt contains a secretRef for the passbolt credentials.",
      "properties": {
        "passwordSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        },
        "privateKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector"
        }
      },
      "required": [
        "passwordSecretRef",
        "privateKeySecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PassboltProvider": {
      "additionalProperties": false,
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PassboltAuth",
          "description": "Auth defines the information necessary to authenticate against Passbolt Server"
        },
        "host": {
          "default": "",
          "description": "Host defines the Passbolt Server to connect to",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "host"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PasswordDepotAuth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PasswordDepotSecretRef",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PasswordDepotProvider": {
      "additionalProperties": false,
      "description": "Configures a store to sync secrets with a Password Depot instance.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PasswordDepotAuth",
          "default": {},
          "description": "Auth configures how secret-manager authenticates with a Password Depot instance."
        },
        "database": {
          "default": "",
          "description": "Database to use as source",
          "type": "string"
        },
        "host": {
          "default": "",
          "description": "URL configures the Password Depot instance URL.",
          "type": "string"
        }
      },
      "required": [
        "host",
        "database",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PasswordDepotSecretRef": {
      "additionalProperties": false,
      "properties": {
        "credentials": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "Username / Password is used for authentication."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PreviderAuth": {
      "additionalProperties": false,
      "description": "PreviderAuth contains a secretRef for credentials.",
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PreviderAuthSecretRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PreviderAuthSecretRef": {
      "additionalProperties": false,
      "description": "PreviderAuthSecretRef holds secret references for Previder Vault credentials.",
      "properties": {
        "accessToken": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessToken is used for authentication"
        }
      },
      "required": [
        "accessToken"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PreviderProvider": {
      "additionalProperties": false,
      "description": "PreviderProvider configures a store to sync secrets using the Previder Secret Manager provider.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PreviderAuth",
          "default": {}
        },
        "baseUri": {
          "type": "string"
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PulumiProvider": {
      "additionalProperties": false,
      "properties": {
        "accessToken": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PulumiProviderSecretRef",
          "description": "AccessToken is the access tokens to sign in to the Pulumi Cloud Console."
        },
        "apiUrl": {
          "description": "APIURL is the URL of the Pulumi API.",
          "type": "string"
        },
        "environment": {
          "default": "",
          "description": "Environment are YAML documents composed of static key-value pairs, programmatic expressions, dynamically retrieved values from supported providers including all major clouds, and other Pulumi ESC environments. To create a new environment, visit https://www.pulumi.com/docs/esc/environments/ for more information.",
          "type": "string"
        },
        "organization": {
          "default": "",
          "description": "Organization are a space to collaborate on shared projects and stacks. To create a new organization, visit https://app.pulumi.com/ and click \"New Organization\".",
          "type": "string"
        },
        "project": {
          "default": "",
          "description": "Project is the name of the Pulumi ESC project the environment belongs to.",
          "type": "string"
        }
      },
      "required": [
        "accessToken",
        "organization",
        "project",
        "environment"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.PulumiProviderSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "SecretRef is a reference to a secret containing the Pulumi API token."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ScalewayProvider": {
      "additionalProperties": false,
      "properties": {
        "accessKey": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ScalewayProviderSecretRef",
          "description": "AccessKey is the non-secret part of the api key."
        },
        "apiUrl": {
          "description": "APIURL is the url of the api to use. Defaults to https://api.scaleway.com",
          "type": "string"
        },
        "projectId": {
          "default": "",
          "description": "ProjectID is the id of your project, which you can find in the console: https://console.scaleway.com/project/settings",
          "type": "string"
        },
        "region": {
          "default": "",
          "description": "Region where your secrets are located: https://developers.scaleway.com/en/quickstart/#region-and-zone",
          "type": "string"
        },
        "secretKey": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ScalewayProviderSecretRef",
          "description": "SecretKey is the non-secret part of the api key."
        }
      },
      "required": [
        "region",
        "projectId",
        "accessKey",
        "secretKey"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.ScalewayProviderSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "SecretRef references a key in a secret that will be used as value."
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretServerProvider": {
      "additionalProperties": false,
      "description": "See https://github.com/DelineaXPM/tss-sdk-go/blob/main/server/server.go.",
      "properties": {
        "password": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretServerProviderRef",
          "description": "Password is the secret server account password."
        },
        "serverURL": {
          "default": "",
          "description": "ServerURL URL to your secret server installation",
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretServerProviderRef",
          "description": "Username is the secret server account username."
        }
      },
      "required": [
        "username",
        "password",
        "serverURL"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretServerProviderRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "SecretRef references a key in a secret that will be used as value."
        },
        "value": {
          "description": "Value can be specified directly to set a value without using a secret.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreProvider": {
      "additionalProperties": false,
      "description": "SecretStoreProvider contains the provider-specific configuration.",
      "properties": {
        "akeyless": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AkeylessProvider",
          "description": "Akeyless configures this store to sync secrets using Akeyless Vault provider"
        },
        "alibaba": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AlibabaProvider",
          "description": "Alibaba configures this store to sync secrets using Alibaba Cloud provider"
        },
        "aws": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AWSProvider",
          "description": "AWS configures this store to sync secrets using AWS Secret Manager provider"
        },
        "azurekv": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AzureKVProvider",
          "description": "AzureKV configures this store to sync secrets using Azure Key Vault provider"
        },
        "beyondtrust": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BeyondtrustProvider",
          "description": "Beyondtrust configures this store to sync secrets using Password Safe provider."
        },
        "bitwardensecretsmanager": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.BitwardenSecretsManagerProvider",
          "description": "BitwardenSecretsManager configures this store to sync secrets using BitwardenSecretsManager provider"
        },
        "chef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ChefProvider",
          "description": "Chef configures this store to sync secrets with chef server"
        },
        "cloudrusm": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CloudruSMProvider",
          "description": "CloudruSM configures this store to sync secrets using the Cloud.ru Secret Manager provider"
        },
        "conjur": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ConjurProvider",
          "description": "Conjur configures this store to sync secrets using conjur provider"
        },
        "delinea": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DelineaProvider",
          "description": "Delinea DevOps Secrets Vault https://docs.delinea.com/online-help/products/devops-secrets-vault/current"
        },
        "device42": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.Device42Provider",
          "description": "Device42 configures this store to sync secrets using the Device42 provider"
        },
        "doppler": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.DopplerProvider",
          "description": "Doppler configures this store to sync secrets using the Doppler provider"
        },
        "fake": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FakeProvider",
          "description": "Fake configures a store with static key/value pairs"
        },
        "fortanix": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.FortanixProvider",
          "description": "Fortanix configures this store to sync secrets using the Fortanix provider"
        },
        "gcpsm": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GCPSMProvider",
          "description": "GCPSM configures this store to sync secrets using Google Cloud Platform Secret Manager provider"
        },
        "github": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GithubProvider",
          "description": "Github configures this store to push Github Action secrets using Github API provider"
        },
        "gitlab": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GitlabProvider",
          "description": "GitLab configures this store to sync secrets using GitLab Variables provider"
        },
        "ibm": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.IBMProvider",
          "description": "IBM configures this store to sync secrets using IBM Cloud provider"
        },
        "infisical": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.InfisicalProvider",
          "description": "Infisical configures this store to sync secrets using the Infisical provider"
        },
        "keepersecurity": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KeeperSecurityProvider",
          "description": "KeeperSecurity configures this store to sync secrets using the KeeperSecurity provider"
        },
        "kubernetes": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.KubernetesProvider",
          "description": "Kubernetes configures this store to sync secrets using a Kubernetes cluster provider"
        },
        "onboardbase": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnboardbaseProvider",
          "description": "Onboardbase configures this store to sync secrets using the Onboardbase provider"
        },
        "onepassword": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordProvider",
          "description": "OnePassword configures this store to sync secrets using the 1Password Cloud provider"
        },
        "onepasswordSDK": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OnePasswordSDKProvider",
          "description": "OnePasswordSDK configures this store to use 1Password's new Go SDK to sync secrets."
        },
        "oracle": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.OracleProvider",
          "description": "Oracle configures this store to sync secrets using Oracle Vault provider"
        },
        "passbolt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PassboltProvider"
        },
        "passworddepot": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PasswordDepotProvider"
        },
        "previder": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PreviderProvider",
          "description": "Previder configures this store to sync secrets using the Previder provider"
        },
        "pulumi": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.PulumiProvider",
          "description": "Pulumi configures this store to sync secrets using the Pulumi provider"
        },
        "scaleway": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ScalewayProvider",
          "description": "Scaleway"
        },
        "secretserver": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretServerProvider",
          "description": "SecretServer configures this store to sync secrets using SecretServer provider https://docs.delinea.com/online-help/secret-server/start.htm"
        },
        "senhasegura": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SenhaseguraProvider",
          "description": "Senhasegura configures this store to sync secrets using senhasegura provider"
        },
        "vault": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultProvider",
          "description": "Vault configures this store to sync secrets using Hashi provider"
        },
        "webhook": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookProvider",
          "description": "Webhook configures this store to sync secrets using a generic templated webhook"
        },
        "yandexcertificatemanager": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerProvider",
          "description": "YandexCertificateManager configures this store to sync secrets using Yandex Certificate Manager provider"
        },
        "yandexlockbox": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexLockboxProvider",
          "description": "YandexLockbox configures this store to sync secrets using Yandex Lockbox provider"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreRef": {
      "additionalProperties": false,
      "description": "SecretStoreRef defines which SecretStore to fetch the ExternalSecret data.",
      "properties": {
        "kind": {
          "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore) Defaults to `SecretStore`",
          "type": "string"
        },
        "name": {
          "description": "Name of the SecretStore resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreRetrySettings": {
      "additionalProperties": false,
      "properties": {
        "maxRetries": {
          "format": "int32",
          "type": "integer"
        },
        "retryInterval": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretStoreSpec": {
      "additionalProperties": false,
      "description": "SecretStoreSpec defines the desired state of SecretStore.",
      "properties": {
        "conditions": {
          "description": "Used to constraint a ClusterSecretStore to specific namespaces. Relevant only to ClusterSecretStore",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterSecretStoreCondition",
            "default": {}
          },
          "type": "array"
        },
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters ES based on this property",
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreProvider",
          "description": "Used to configure the provider. Only one provider may be set"
        },
        "refreshInterval": {
          "description": "Used to configure store refresh interval in seconds. Empty or 0 will default to the controller config.",
          "format": "int32",
          "type": "integer"
        },
        "retrySettings": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRetrySettings",
          "description": "Used to configure http retries if failed"
        }
      },
      "required": [
        "provider"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SecretsManager": {
      "additionalProperties": false,
      "description": "SecretsManager defines how the provider behaves when interacting with AWS SecretsManager. Some of these settings are only applicable to controlling how secrets are deleted, and hence only apply to PushSecret (and only when deletionPolicy is set to Delete).",
      "properties": {
        "forceDeleteWithoutRecovery": {
          "description": "Specifies whether to delete the secret without any recovery window. You can't use both this parameter and RecoveryWindowInDays in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-ForceDeleteWithoutRecovery",
          "type": "boolean"
        },
        "recoveryWindowInDays": {
          "description": "The number of days from 7 to 30 that Secrets Manager waits before permanently deleting the secret. You can't use both this parameter and ForceDeleteWithoutRecovery in the same call. If you don't use either, then by default Secrets Manager uses a 30 day recovery window. see: https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html#SecretsManager-DeleteSecret-request-RecoveryWindowInDays",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SenhaseguraAuth": {
      "additionalProperties": false,
      "description": "SenhaseguraAuth tells the controller how to do auth in senhasegura.",
      "properties": {
        "clientId": {
          "default": "",
          "type": "string"
        },
        "clientSecretSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "clientId",
        "clientSecretSecretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.SenhaseguraProvider": {
      "additionalProperties": false,
      "description": "SenhaseguraProvider setup a store to sync secrets with senhasegura.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SenhaseguraAuth",
          "default": {},
          "description": "Auth defines parameters to authenticate in senhasegura"
        },
        "ignoreSslCertificate": {
          "description": "IgnoreSslCertificate defines if SSL certificate must be ignored",
          "type": "boolean"
        },
        "module": {
          "default": "",
          "description": "Module defines which senhasegura module should be used to get secrets",
          "type": "string"
        },
        "url": {
          "default": "",
          "description": "URL of senhasegura",
          "type": "string"
        }
      },
      "required": [
        "url",
        "module",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.StoreGeneratorSourceRef": {
      "additionalProperties": false,
      "description": "StoreGeneratorSourceRef allows you to override the source from which the secret will be pulled from. You can define at maximum one property.",
      "properties": {
        "generatorRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GeneratorRef",
          "description": "GeneratorRef points to a generator custom resource."
        },
        "storeRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.StoreSourceRef": {
      "additionalProperties": false,
      "description": "StoreSourceRef allows you to override the SecretStore source from which the secret will be pulled from. You can define at maximum one property.",
      "properties": {
        "generatorRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GeneratorRef",
          "description": "GeneratorRef points to a generator custom resource.\n\nDeprecated: The generatorRef is not implemented in .data[]. this will be removed with v1."
        },
        "storeRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRef",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.Tag": {
      "additionalProperties": false,
      "properties": {
        "key": {
          "default": "",
          "type": "string"
        },
        "value": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.TemplateFrom": {
      "additionalProperties": false,
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateRef"
        },
        "literal": {
          "type": "string"
        },
        "secret": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateRef"
        },
        "target": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.TemplateRef": {
      "additionalProperties": false,
      "properties": {
        "items": {
          "description": "A list of keys in the ConfigMap/Secret to use as templates for Secret data",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.TemplateRefItem",
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "default": "",
          "description": "The name of the ConfigMap/Secret resource",
          "type": "string"
        }
      },
      "required": [
        "name",
        "items"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.TemplateRefItem": {
      "additionalProperties": false,
      "properties": {
        "key": {
          "default": "",
          "description": "A key in the ConfigMap/Secret",
          "type": "string"
        },
        "templateAs": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.TokenAuth": {
      "additionalProperties": false,
      "properties": {
        "bearerToken": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.UniversalAuthCredentials": {
      "additionalProperties": false,
      "properties": {
        "clientId": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "clientSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "clientId",
        "clientSecret"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAppRole": {
      "additionalProperties": false,
      "description": "VaultAppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.",
      "properties": {
        "path": {
          "default": "",
          "description": "Path where the App Role authentication backend is mounted in Vault, e.g: \"approle\"",
          "type": "string"
        },
        "roleId": {
          "description": "RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.",
          "type": "string"
        },
        "roleRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "Reference to a key in a Secret that contains the App Role ID used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role id."
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret."
        }
      },
      "required": [
        "path",
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAuth": {
      "additionalProperties": false,
      "description": "VaultAuth is the configuration used to authenticate with a Vault server. Only one of `tokenSecretRef`, `appRole`,  `kubernetes`, `ldap`, `userPass`, `jwt` or `cert` can be specified. A namespace to authenticate against can optionally be specified.",
      "properties": {
        "appRole": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAppRole",
          "description": "AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource."
        },
        "cert": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultCertAuth",
          "description": "Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate Cert authentication method"
        },
        "iam": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultIamAuth",
          "description": "Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials AWS IAM authentication method"
        },
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultJwtAuth",
          "description": "Jwt authenticates with Vault by passing role and JWT token using the JWT/OIDC authentication method"
        },
        "kubernetes": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultKubernetesAuth",
          "description": "Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server."
        },
        "ldap": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultLdapAuth",
          "description": "Ldap authenticates with Vault by passing username/password pair using the LDAP authentication method"
        },
        "namespace": {
          "description": "Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces This will default to Vault.Namespace field if set, or empty otherwise",
          "type": "string"
        },
        "tokenSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "TokenSecretRef authenticates with Vault by presenting a token."
        },
        "userPass": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultUserPassAuth",
          "description": "UserPass authenticates with Vault by passing username/password pair"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAwsAuthSecretRef": {
      "additionalProperties": false,
      "description": "VaultAWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "properties": {
        "accessKeyIDSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeyID is used for authentication"
        },
        "secretAccessKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessKey is used for authentication"
        },
        "sessionTokenSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultAwsJWTAuth": {
      "additionalProperties": false,
      "description": "VaultAwsJWTAuth Authenticate against AWS using service account tokens.",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultCertAuth": {
      "additionalProperties": false,
      "description": "VaultCertAuth authenticates with Vault using the JWT/OIDC authentication method, with the role name and token stored in a Kubernetes Secret resource.",
      "properties": {
        "clientCert": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "ClientCert is a certificate to authenticate using the Cert Vault authentication method"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "SecretRef to a key in a Secret resource containing client private key to authenticate with Vault using the Cert authentication method"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultClientTLS": {
      "additionalProperties": false,
      "description": "VaultClientTLS is the configuration used for client side related TLS communication, when the Vault server requires mutual authentication.",
      "properties": {
        "certSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "CertSecretRef is a certificate added to the transport layer when communicating with the Vault server. If no key for the Secret is specified, external-secret will default to 'tls.crt'."
        },
        "keySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "KeySecretRef to a key in a Secret resource containing client private key added to the transport layer when communicating with the Vault server. If no key for the Secret is specified, external-secret will default to 'tls.key'."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultIamAuth": {
      "additionalProperties": false,
      "description": "VaultIamAuth authenticates with Vault using the Vault's AWS IAM authentication method. Refer: https://developer.hashicorp.com/vault/docs/auth/aws",
      "properties": {
        "externalID": {
          "description": "AWS External ID set on assumed IAM roles",
          "type": "string"
        },
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAwsJWTAuth",
          "description": "Specify a service account with IRSA enabled"
        },
        "path": {
          "description": "Path where the AWS auth method is enabled in Vault, e.g: \"aws\"",
          "type": "string"
        },
        "region": {
          "description": "AWS region",
          "type": "string"
        },
        "role": {
          "description": "This is the AWS role to be assumed before talking to vault",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAwsAuthSecretRef",
          "description": "Specify credentials in a Secret object"
        },
        "vaultAwsIamServerID": {
          "description": "X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws",
          "type": "string"
        },
        "vaultRole": {
          "default": "",
          "description": "Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine",
          "type": "string"
        }
      },
      "required": [
        "vaultRole"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultJwtAuth": {
      "additionalProperties": false,
      "description": "VaultJwtAuth authenticates with Vault using the JWT/OIDC authentication method, with the role name and a token stored in a Kubernetes Secret resource or a Kubernetes service account token retrieved via `TokenRequest`.",
      "properties": {
        "kubernetesServiceAccountToken": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultKubernetesServiceAccountTokenAuth",
          "description": "Optional ServiceAccountToken specifies the Kubernetes service account for which to request a token for with the `TokenRequest` API."
        },
        "path": {
          "default": "",
          "description": "Path where the JWT authentication backend is mounted in Vault, e.g: \"jwt\"",
          "type": "string"
        },
        "role": {
          "description": "Role is a JWT role to authenticate using the JWT/OIDC Vault authentication method",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "Optional SecretRef that refers to a key in a Secret resource containing JWT token to authenticate with Vault using the JWT/OIDC authentication method."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultKubernetesAuth": {
      "additionalProperties": false,
      "description": "Authenticate against Vault using a Kubernetes ServiceAccount token stored in a Secret.",
      "properties": {
        "mountPath": {
          "default": "",
          "description": "Path where the Kubernetes authentication backend is mounted in Vault, e.g: \"kubernetes\"",
          "type": "string"
        },
        "role": {
          "default": "",
          "description": "A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "Optional secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. If a name is specified without a key, `token` is the default. If one is not specified, the one bound to the controller will be used."
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "Optional service account field containing the name of a kubernetes ServiceAccount. If the service account is specified, the service account secret token JWT will be used for authenticating with Vault. If the service account selector is not supplied, the secretRef will be used instead."
        }
      },
      "required": [
        "mountPath",
        "role"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultKubernetesServiceAccountTokenAuth": {
      "additionalProperties": false,
      "description": "VaultKubernetesServiceAccountTokenAuth authenticates with Vault using a temporary Kubernetes service account token retrieved by the `TokenRequest` API.",
      "properties": {
        "audiences": {
          "description": "Optional audiences field that will be used to request a temporary Kubernetes service account token for the service account referenced by `serviceAccountRef`. Defaults to a single audience `vault` it not specified. Deprecated: use serviceAccountRef.Audiences instead",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "expirationSeconds": {
          "description": "Optional expiration time in seconds that will be used to request a temporary Kubernetes service account token for the service account referenced by `serviceAccountRef`. Deprecated: this will be removed in the future. Defaults to 10 minutes.",
          "format": "int64",
          "type": "integer"
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "default": {},
          "description": "Service account field containing the name of a kubernetes ServiceAccount."
        }
      },
      "required": [
        "serviceAccountRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultLdapAuth": {
      "additionalProperties": false,
      "description": "VaultLdapAuth authenticates with Vault using the LDAP authentication method, with the username and password stored in a Kubernetes Secret resource.",
      "properties": {
        "path": {
          "default": "",
          "description": "Path where the LDAP authentication backend is mounted in Vault, e.g: \"ldap\"",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "SecretRef to a key in a Secret resource containing password for the LDAP user used to authenticate with Vault using the LDAP authentication method"
        },
        "username": {
          "default": "",
          "description": "Username is an LDAP username used to authenticate using the LDAP Vault authentication method",
          "type": "string"
        }
      },
      "required": [
        "path",
        "username"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultProvider": {
      "additionalProperties": false,
      "description": "Configures an store to sync secrets using a HashiCorp Vault KV backend.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultAuth",
          "description": "Auth configures how secret-manager authenticates with the Vault server."
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "format": "byte",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.CAProvider",
          "description": "The provider for the CA bundle to use to validate Vault server certificate."
        },
        "forwardInconsistent": {
          "description": "ForwardInconsistent tells Vault to forward read-after-write requests to the Vault leader instead of simply retrying within a loop. This can increase performance if the option is enabled serverside. https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header",
          "type": "boolean"
        },
        "headers": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Headers to be added in Vault request",
          "type": "object"
        },
        "namespace": {
          "description": "Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \"ns1\". More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces",
          "type": "string"
        },
        "path": {
          "description": "Path is the mount path of the Vault KV backend endpoint, e.g: \"secret\". The v2 KV secret engine version specific \"/data\" path suffix for fetching secrets from Vault is optional and will be appended if not present in specified path.",
          "type": "string"
        },
        "readYourWrites": {
          "description": "ReadYourWrites ensures isolated read-after-write semantics by providing discovered cluster replication states in each request. More information about eventual consistency in Vault can be found here https://www.vaultproject.io/docs/enterprise/consistency",
          "type": "boolean"
        },
        "server": {
          "default": "",
          "description": "Server is the connection address for the Vault server, e.g: \"https://vault.example.com:8200\".",
          "type": "string"
        },
        "tls": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultClientTLS",
          "default": {},
          "description": "The configuration used for client side related TLS communication, when the Vault server requires mutual authentication. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. It's worth noting this configuration is different from the \"TLS certificates auth method\", which is available under the `auth.cert` section."
        },
        "version": {
          "default": "",
          "description": "Version is the Vault KV secret engine version. This can be either \"v1\" or \"v2\". Version defaults to \"v2\".",
          "type": "string"
        }
      },
      "required": [
        "server",
        "version"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.VaultUserPassAuth": {
      "additionalProperties": false,
      "description": "VaultUserPassAuth authenticates with Vault using UserPass authentication method, with the username and password stored in a Kubernetes Secret resource.",
      "properties": {
        "path": {
          "default": "",
          "description": "Path where the UserPassword authentication backend is mounted in Vault, e.g: \"userpass\"",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "SecretRef to a key in a Secret resource containing password for the user used to authenticate with Vault using the UserPass authentication method"
        },
        "username": {
          "default": "",
          "description": "Username is a username used to authenticate using the UserPass Vault authentication method",
          "type": "string"
        }
      },
      "required": [
        "path",
        "username"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookCAProvider": {
      "additionalProperties": false,
      "description": "Defines a location to fetch the cert for the webhook provider from.",
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the object located at the provider type.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace the Provider type is in.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookProvider": {
      "additionalProperties": false,
      "description": "WebHookProvider Configures an store to sync secrets from simple web apis.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.AuthorizationProtocol",
          "description": "Auth specifies a authorization protocol. Only one protocol may be set."
        },
        "body": {
          "description": "Body",
          "type": "string"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate webhook server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "format": "byte",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookCAProvider",
          "description": "The provider for the CA bundle to use to validate webhook server certificate."
        },
        "headers": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Headers",
          "type": "object"
        },
        "method": {
          "description": "Webhook Method",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookResult",
          "default": {},
          "description": "Result formatting"
        },
        "secrets": {
          "description": "Secrets to fill in templates These secrets will be passed to the templating function as key value pairs under the given name",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.WebhookSecret",
            "default": {}
          },
          "type": "array"
        },
        "timeout": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration",
          "description": "Timeout"
        },
        "url": {
          "default": "",
          "description": "Webhook url to call",
          "type": "string"
        }
      },
      "required": [
        "url",
        "result"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookResult": {
      "additionalProperties": false,
      "properties": {
        "jsonPath": {
          "description": "Json path of return value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.WebhookSecret": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "default": "",
          "description": "Name of this secret in templates",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "Secret ref to fill in credentials"
        }
      },
      "required": [
        "name",
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerAuth": {
      "additionalProperties": false,
      "properties": {
        "authorizedKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The authorized key used for authentication"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerCAProvider": {
      "additionalProperties": false,
      "properties": {
        "certSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerProvider": {
      "additionalProperties": false,
      "description": "YandexCertificateManagerProvider Configures a store to sync secrets using the Yandex Certificate Manager provider.",
      "properties": {
        "apiEndpoint": {
          "description": "Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')",
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerAuth",
          "default": {},
          "description": "Auth defines the information necessary to authenticate against Yandex Certificate Manager"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexCertificateManagerCAProvider",
          "description": "The provider for the CA bundle to use to validate Yandex.Cloud server certificate."
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexLockboxAuth": {
      "additionalProperties": false,
      "properties": {
        "authorizedKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The authorized key used for authentication"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexLockboxCAProvider": {
      "additionalProperties": false,
      "properties": {
        "certSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1.YandexLockboxProvider": {
      "additionalProperties": false,
      "description": "YandexLockboxProvider Configures a store to sync secrets using the Yandex Lockbox provider.",
      "properties": {
        "apiEndpoint": {
          "description": "Yandex.Cloud API endpoint (e.g. 'api.cloud.yandex.net:443')",
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexLockboxAuth",
          "default": {},
          "description": "Auth defines the information necessary to authenticate against Yandex Lockbox"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.YandexLockboxCAProvider",
          "description": "The provider for the CA bundle to use to validate Yandex.Cloud server certificate."
        }
      },
      "required": [
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretSpec": {
      "additionalProperties": false,
      "properties": {
        "namespaceSelectors": {
          "description": "A list of labels to select by to find the Namespaces to create the ExternalSecrets in. The selectors are ORed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "type": "array"
        },
        "pushSecretMetadata": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMetadata",
          "default": {},
          "description": "The metadata of the external secrets to be created"
        },
        "pushSecretName": {
          "description": "The name of the push secrets to be created. Defaults to the name of the ClusterPushSecret",
          "type": "string"
        },
        "pushSecretSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSpec",
          "default": {},
          "description": "PushSecretSpec defines what to do with the secrets."
        },
        "refreshTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration",
          "description": "The time in which the controller should reconcile its objects and recheck namespaces for labels."
        }
      },
      "required": [
        "pushSecretSpec"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretData": {
      "additionalProperties": false,
      "properties": {
        "conversionStrategy": {
          "description": "Used to define a conversion Strategy for the secret keys",
          "type": "string"
        },
        "match": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMatch",
          "default": {},
          "description": "Match a given Secret Key to be pushed to the provider."
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
          "description": "Metadata is metadata attached to the secret. The structure of metadata is provider specific, please look it up in the provider documentation."
        }
      },
      "required": [
        "match"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMatch": {
      "additionalProperties": false,
      "properties": {
        "remoteRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretRemoteRef",
          "default": {},
          "description": "Remote Refs to push to providers."
        },
        "secretKey": {
          "description": "Secret Key to be pushed",
          "type": "string"
        }
      },
      "required": [
        "remoteRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretMetadata": {
      "additionalProperties": false,
      "description": "PushSecretMetadata defines metadata fields for the PushSecret generated by the ClusterPushSecret.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretRemoteRef": {
      "additionalProperties": false,
      "properties": {
        "property": {
          "description": "Name of the property in the resulting secret",
          "type": "string"
        },
        "remoteKey": {
          "default": "",
          "description": "Name of the resulting provider secret.",
          "type": "string"
        }
      },
      "required": [
        "remoteKey"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSecret": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "Name of the Secret. The Secret must exist in the same namespace as the PushSecret manifest.",
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selector chooses secrets using a labelSelector."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSelector": {
      "additionalProperties": false,
      "properties": {
        "generatorRef": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.GeneratorRef",
          "description": "Point to a generator to create a Secret."
        },
        "secret": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSecret",
          "description": "Select a Secret to Push."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSpec": {
      "additionalProperties": false,
      "description": "PushSecretSpec configures the behavior of the PushSecret.",
      "properties": {
        "data": {
          "description": "Secret Data that should be pushed to providers",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretData",
            "default": {}
          },
          "type": "array"
        },
        "deletionPolicy": {
          "description": "Deletion Policy to handle Secrets in the provider.",
          "type": "string"
        },
        "refreshInterval": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration",
          "description": "The Interval to which External Secrets will try to push a secret definition"
        },
        "secretStoreRefs": {
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStoreRef",
            "default": {}
          },
          "type": "array"
        },
        "selector": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSelector",
          "default": {},
          "description": "The Secret Selector (k8s source) for the Push Secret"
        },
        "template": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretTemplate",
          "description": "Template defines a blueprint for the created Secret resource."
        },
        "updatePolicy": {
          "description": "UpdatePolicy to handle Secrets in the provider.",
          "type": "string"
        }
      },
      "required": [
        "secretStoreRefs",
        "selector"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretStoreRef": {
      "additionalProperties": false,
      "properties": {
        "kind": {
          "description": "Kind of the SecretStore resource (SecretStore or ClusterSecretStore)",
          "type": "string"
        },
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Optionally, sync to secret stores with label selector"
        },
        "name": {
          "description": "Optionally, sync to the SecretStore of the given name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.ACRAccessTokenSpec": {
      "additionalProperties": false,
      "description": "ACRAccessTokenSpec defines how to generate the access token e.g. how to authenticate and which registry to use. see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ACRAuth",
          "default": {}
        },
        "environmentType": {
          "description": "EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint. The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152 PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud",
          "type": "string"
        },
        "registry": {
          "default": "",
          "description": "the domain name of the ACR registry e.g. foobarexample.azurecr.io",
          "type": "string"
        },
        "scope": {
          "description": "Define the scope for the access token, e.g. pull/push access for a repository. if not provided it will return a refresh token that has full scope. Note: you need to pin it down to the repository level, there is no wildcard available.\n\nexamples: repository:my-repository:pull,push repository:my-repository:pull\n\nsee docs for details: https://docs.docker.com/registry/spec/auth/scope/",
          "type": "string"
        },
        "tenantId": {
          "description": "TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "registry"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.ACRAuth": {
      "additionalProperties": false,
      "properties": {
        "managedIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRManagedIdentityAuth",
          "description": "ManagedIdentity uses Azure Managed Identity to authenticate with Azure."
        },
        "servicePrincipal": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuth",
          "description": "ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure."
        },
        "workloadIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRWorkloadIdentityAuth",
          "description": "WorkloadIdentity uses Azure Workload Identity to authenticate with Azure."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AWSAuth": {
      "additionalProperties": false,
      "description": "AWSAuth tells the controller how to do authentication with aws. Only one of secretRef or jwt can be specified. if none is specified the controller will load credentials using the aws sdk defaults.",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSJWTAuth"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSAuthSecretRef"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AWSAuthSecretRef": {
      "additionalProperties": false,
      "description": "AWSAuthSecretRef holds secret references for AWS credentials both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.",
      "properties": {
        "accessKeyIDSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The AccessKeyID is used for authentication"
        },
        "secretAccessKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessKey is used for authentication"
        },
        "sessionTokenSecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "description": "The SessionToken used for authentication This must be defined if AccessKeyID and SecretAccessKey are temporary credentials see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AWSJWTAuth": {
      "additionalProperties": false,
      "description": "Authenticate against AWS using service account tokens.",
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AuthorizationProtocol": {
      "additionalProperties": false,
      "description": "AuthorizationProtocol contains the protocol-specific configuration",
      "properties": {
        "ntlm": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.NTLMProtocol",
          "description": "NTLMProtocol configures the store to use NTLM for auth"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRManagedIdentityAuth": {
      "additionalProperties": false,
      "properties": {
        "identityId": {
          "description": "If multiple Managed Identity is assigned to the pod, you can select the one to be used",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuthSecretRef",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRServicePrincipalAuthSecretRef": {
      "additionalProperties": false,
      "description": "Configuration used to authenticate with Azure using static credentials stored in a Kind=Secret.",
      "properties": {
        "clientId": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The Azure clientId of the service principle used for authentication."
        },
        "clientSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The Azure ClientSecret of the service principle used for authentication."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.AzureACRWorkloadIdentityAuth": {
      "additionalProperties": false,
      "properties": {
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "description": "ServiceAccountRef specified the service account that should be used when authenticating with WorkloadIdentity."
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.ClusterGeneratorSpec": {
      "additionalProperties": false,
      "properties": {
        "generator": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GeneratorSpec",
          "default": {},
          "description": "Generator the spec for this generator, must match the kind."
        },
        "kind": {
          "default": "",
          "description": "Kind the kind of this generator.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "generator"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationTokenSpec": {
      "additionalProperties": false,
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSAuth",
          "default": {},
          "description": "Auth defines how to authenticate with AWS"
        },
        "region": {
          "default": "",
          "description": "Region specifies the region to operate in.",
          "type": "string"
        },
        "role": {
          "description": "You can assume a role before making calls to the desired AWS service.",
          "type": "string"
        },
        "scope": {
          "description": "Scope specifies the ECR service scope. Valid options are private and public.",
          "type": "string"
        }
      },
      "required": [
        "region"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.FakeSpec": {
      "additionalProperties": false,
      "description": "FakeSpec contains the static data.",
      "properties": {
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters VDS based on this property",
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Data defines the static data returned by this generator.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GCPSMAuth": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCPSMAuthSecretRef"
        },
        "workloadIdentity": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCPWorkloadIdentity"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GCPSMAuthSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretAccessKeySecretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "The SecretAccessKey is used for authentication"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GCPWorkloadIdentity": {
      "additionalProperties": false,
      "properties": {
        "clusterLocation": {
          "default": "",
          "type": "string"
        },
        "clusterName": {
          "default": "",
          "type": "string"
        },
        "clusterProjectID": {
          "type": "string"
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "default": {}
        }
      },
      "required": [
        "serviceAccountRef",
        "clusterLocation",
        "clusterName"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GCRAccessTokenSpec": {
      "additionalProperties": false,
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCPSMAuth",
          "default": {},
          "description": "Auth defines the means for authenticating with GCP"
        },
        "projectID": {
          "default": "",
          "description": "ProjectID defines which project to use to authenticate with",
          "type": "string"
        }
      },
      "required": [
        "auth",
        "projectID"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GeneratorSpec": {
      "additionalProperties": false,
      "properties": {
        "acrAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ACRAccessTokenSpec"
        },
        "ecrAuthorizationTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationTokenSpec"
        },
        "fakeSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.FakeSpec"
        },
        "gcrAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCRAccessTokenSpec"
        },
        "githubAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubAccessTokenSpec"
        },
        "grafanaSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaSpec"
        },
        "mfaSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.MFASpec"
        },
        "passwordSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.PasswordSpec"
        },
        "quayAccessTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.QuayAccessTokenSpec"
        },
        "stsSessionTokenSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.STSSessionTokenSpec"
        },
        "uuidSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.UUIDSpec"
        },
        "vaultDynamicSecretSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecretSpec"
        },
        "webhookSpec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookSpec"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubAccessTokenSpec": {
      "additionalProperties": false,
      "properties": {
        "appID": {
          "default": "",
          "type": "string"
        },
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubAuth",
          "default": {},
          "description": "Auth configures how ESO authenticates with a Github instance."
        },
        "installID": {
          "default": "",
          "type": "string"
        },
        "permissions": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of permissions the token will have. If omitted, defaults to all permissions the GitHub App has.",
          "type": "object"
        },
        "repositories": {
          "description": "List of repositories the token will have access to. If omitted, defaults to all repositories the GitHub App is installed to.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "url": {
          "description": "URL configures the Github instance URL. Defaults to https://github.com/.",
          "type": "string"
        }
      },
      "required": [
        "appID",
        "installID",
        "auth"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubAuth": {
      "additionalProperties": false,
      "properties": {
        "privateKey": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubSecretRef",
          "default": {}
        }
      },
      "required": [
        "privateKey"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GithubSecretRef": {
      "additionalProperties": false,
      "properties": {
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaAuth": {
      "additionalProperties": false,
      "properties": {
        "basic": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaBasicAuth",
          "description": "Basic auth credentials used to authenticate against the Grafana instance. Note: you need a token which has elevated permissions to create service accounts. See here for the documentation on basic roles offered by Grafana: https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/"
        },
        "token": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.SecretKeySelector",
          "description": "A service account token used to authenticate against the Grafana instance. Note: you need a token which has elevated permissions to create service accounts. See here for the documentation on basic roles offered by Grafana: https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaBasicAuth": {
      "additionalProperties": false,
      "properties": {
        "password": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.SecretKeySelector",
          "default": {},
          "description": "A basic auth password used to authenticate against the Grafana instance."
        },
        "username": {
          "default": "",
          "description": "A basic auth username used to authenticate against the Grafana instance.",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaServiceAccount": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the service account that will be created by ESO.",
          "type": "string"
        },
        "role": {
          "default": "",
          "description": "Role is the role of the service account. See here for the documentation on basic roles offered by Grafana: https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/",
          "type": "string"
        }
      },
      "required": [
        "name",
        "role"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.GrafanaSpec": {
      "additionalProperties": false,
      "description": "GrafanaSpec controls the behavior of the grafana generator.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaAuth",
          "default": {},
          "description": "Auth is the authentication configuration to authenticate against the Grafana instance."
        },
        "serviceAccount": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaServiceAccount",
          "default": {},
          "description": "ServiceAccount is the configuration for the service account that is supposed to be generated by the generator."
        },
        "url": {
          "default": "",
          "description": "URL is the URL of the Grafana instance.",
          "type": "string"
        }
      },
      "required": [
        "url",
        "auth",
        "serviceAccount"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.MFASpec": {
      "additionalProperties": false,
      "description": "MFASpec controls the behavior of the mfa generator.",
      "properties": {
        "algorithm": {
          "description": "Algorithm to use for encoding. Defaults to SHA1 as per the RFC.",
          "type": "string"
        },
        "length": {
          "description": "Length defines the token length. Defaults to 6 characters.",
          "format": "int32",
          "type": "integer"
        },
        "secret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {},
          "description": "Secret is a secret selector to a secret containing the seed secret to generate the TOTP value from."
        },
        "timePeriod": {
          "description": "TimePeriod defines how long the token can be active. Defaults to 30 seconds.",
          "format": "int32",
          "type": "integer"
        },
        "when": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "When defines a time parameter that can be used to pin the origin time of the generated token."
        }
      },
      "required": [
        "secret"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.NTLMProtocol": {
      "additionalProperties": false,
      "description": "NTLMProtocol contains the NTLM-specific configuration.",
      "properties": {
        "passwordSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        },
        "usernameSecret": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.SecretKeySelector",
          "default": {}
        }
      },
      "required": [
        "usernameSecret",
        "passwordSecret"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.PasswordSpec": {
      "additionalProperties": false,
      "description": "PasswordSpec controls the behavior of the password generator.",
      "properties": {
        "allowRepeat": {
          "default": false,
          "description": "set AllowRepeat to true to allow repeating characters.",
          "type": "boolean"
        },
        "digits": {
          "description": "Digits specifies the number of digits in the generated password. If omitted it defaults to 25% of the length of the password",
          "format": "int32",
          "type": "integer"
        },
        "length": {
          "default": 0,
          "description": "Length of the password to be generated. Defaults to 24",
          "format": "int32",
          "type": "integer"
        },
        "noUpper": {
          "default": false,
          "description": "Set NoUpper to disable uppercase characters",
          "type": "boolean"
        },
        "symbolCharacters": {
          "description": "SymbolCharacters specifies the special characters that should be used in the generated password.",
          "type": "string"
        },
        "symbols": {
          "description": "Symbols specifies the number of symbol characters in the generated password. If omitted it defaults to 25% of the length of the password",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "length",
        "noUpper",
        "allowRepeat"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.QuayAccessTokenSpec": {
      "additionalProperties": false,
      "properties": {
        "robotAccount": {
          "default": "",
          "description": "Name of the robot account you are federating with",
          "type": "string"
        },
        "serviceAccountRef": {
          "$ref": "#/definitions/io.external-secrets.apis.meta.v1.ServiceAccountSelector",
          "default": {},
          "description": "Name of the service account you are federating with"
        },
        "url": {
          "description": "URL configures the Quay instance URL. Defaults to quay.io.",
          "type": "string"
        }
      },
      "required": [
        "robotAccount",
        "serviceAccountRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.RequestParameters": {
      "additionalProperties": false,
      "description": "RequestParameters contains parameters that can be passed to the STS service.",
      "properties": {
        "serialNumber": {
          "description": "SerialNumber is the identification number of the MFA device that is associated with the IAM user who is making the GetSessionToken call. Possible values: hardware device (such as GAHT12345678) or an Amazon Resource Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user)",
          "type": "string"
        },
        "sessionDuration": {
          "format": "int32",
          "type": "integer"
        },
        "tokenCode": {
          "description": "TokenCode is the value provided by the MFA device, if MFA is required.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.STSSessionTokenSpec": {
      "additionalProperties": false,
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AWSAuth",
          "default": {},
          "description": "Auth defines how to authenticate with AWS"
        },
        "region": {
          "default": "",
          "description": "Region specifies the region to operate in.",
          "type": "string"
        },
        "requestParameters": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.RequestParameters",
          "description": "RequestParameters contains parameters that can be passed to the STS service."
        },
        "role": {
          "description": "You can assume a role before making calls to the desired AWS service.",
          "type": "string"
        }
      },
      "required": [
        "region"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.SecretKeySelector": {
      "additionalProperties": false,
      "properties": {
        "key": {
          "description": "The key where the token is found.",
          "type": "string"
        },
        "name": {
          "description": "The name of the Secret resource being referred to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.UUIDSpec": {
      "description": "UUIDSpec controls the behavior of the uuid generator.",
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecretSpec": {
      "additionalProperties": false,
      "properties": {
        "allowEmptyResponse": {
          "description": "Do not fail if no secrets are found. Useful for requests where no data is expected.",
          "type": "boolean"
        },
        "controller": {
          "description": "Used to select the correct ESO controller (think: ingress.ingressClassName) The ESO controller is instantiated with a specific controller name and filters VDS based on this property",
          "type": "string"
        },
        "method": {
          "description": "Vault API method to use (GET/POST/other)",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
          "description": "Parameters to pass to Vault write (for non-GET methods)"
        },
        "path": {
          "default": "",
          "description": "Vault path to obtain the dynamic secret from",
          "type": "string"
        },
        "provider": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.VaultProvider",
          "description": "Vault provider common spec"
        },
        "resultType": {
          "description": "Result type defines which data is returned from the generator. By default it is the \"data\" section of the Vault API response. When using e.g. /auth/token/create the \"data\" section is empty but the \"auth\" section contains the generated token. Please refer to the vault docs regarding the result data structure. Additionally, accessing the raw response is possibly by using \"Raw\" result type.",
          "type": "string"
        },
        "retrySettings": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreRetrySettings",
          "description": "Used to configure http retries if failed"
        }
      },
      "required": [
        "provider",
        "path"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookCAProvider": {
      "additionalProperties": false,
      "description": "Defines a location to fetch the cert for the webhook provider from.",
      "properties": {
        "key": {
          "description": "The key where the CA certificate can be found in the Secret or ConfigMap.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the object located at the provider type.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace the Provider type is in.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "The type of provider to use such as \"Secret\", or \"ConfigMap\".",
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookResult": {
      "additionalProperties": false,
      "properties": {
        "jsonPath": {
          "description": "Json path of return value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookSecret": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "default": "",
          "description": "Name of this secret in templates",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.SecretKeySelector",
          "default": {},
          "description": "Secret ref to fill in credentials"
        }
      },
      "required": [
        "name",
        "secretRef"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.generators.v1alpha1.WebhookSpec": {
      "additionalProperties": false,
      "description": "WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.",
      "properties": {
        "auth": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.AuthorizationProtocol",
          "description": "Auth specifies a authorization protocol. Only one protocol may be set."
        },
        "body": {
          "description": "Body",
          "type": "string"
        },
        "caBundle": {
          "description": "PEM encoded CA bundle used to validate webhook server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.",
          "format": "byte",
          "type": "string"
        },
        "caProvider": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookCAProvider",
          "description": "The provider for the CA bundle to use to validate webhook server certificate."
        },
        "headers": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Headers",
          "type": "object"
        },
        "method": {
          "description": "Webhook Method",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookResult",
          "default": {},
          "description": "Result formatting"
        },
        "secrets": {
          "description": "Secrets to fill in templates These secrets will be passed to the templating function as key value pairs under the given name",
          "items": {
            "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookSecret",
            "default": {}
          },
          "type": "array"
        },
        "timeout": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Duration",
          "description": "Timeout"
        },
        "url": {
          "default": "",
          "description": "Webhook url to call",
          "type": "string"
        }
      },
      "required": [
        "url",
        "result"
      ],
      "type": "object"
    },
    "io.external-secrets.apis.meta.v1.SecretKeySelector": {
      "additionalProperties": false,
      "description": "A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.",
      "properties": {
        "key": {
          "description": "A key in the referenced Secret. Some instances of this field may be defaulted, in others it may be required.",
          "type": "string"
        },
        "name": {
          "description": "The name of the Secret resource being referred to.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Secret resource being referred to. Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.external-secrets.apis.meta.v1.ServiceAccountSelector": {
      "additionalProperties": false,
      "description": "A reference to a ServiceAccount resource.",
      "properties": {
        "audiences": {
          "description": "Audience specifies the `aud` claim for the service account token If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity then this audiences will be appended to the list",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "default": "",
          "description": "The name of the ServiceAccount resource being referred to.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the resource being referred to. Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.MatchCondition": {
      "additionalProperties": false,
      "description": "MatchCondition represents a condition which must by fulfilled for a request to be sent to a webhook.",
      "properties": {
        "expression": {
          "description": "Expression represents the expression which will be evaluated by CEL. Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer, organized into CEL variables:\n\n'object' - The object from the incoming request. The value is null for DELETE requests. 'oldObject' - The existing object. The value is null for CREATE requests. 'request' - Attributes of the admission request(/pkg/apis/admission/types.go#AdmissionRequest). 'authorizer' - A CEL Authorizer. May be used to perform authorization checks for the principal (user or service account) of the request.\n  See https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz\n'authorizer.requestResource' - A CEL ResourceCheck constructed from the 'authorizer' and configured with the\n  request resource.\nDocumentation on CEL: https://kubernetes.io/docs/reference/using-api/cel/\n\nRequired.",
          "type": "string"
        },
        "name": {
          "description": "Name is an identifier for this match condition, used for strategic merging of MatchConditions, as well as providing an identifier for logging purposes. A good name should be descriptive of the associated expression. Name must be a qualified name consisting of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')\n\nRequired.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "expression"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
      "additionalProperties": false,
      "description": "MutatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig",
          "description": "ClientConfig defines how to communicate with the hook. Required"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.",
          "type": "string"
        },
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "reinvocationPolicy": {
          "description": "reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\".\n\nNever: the webhook will not be called more than once in a single admission evaluation.\n\nIfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.\n\nDefaults to \"Never\".",
          "type": "string"
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
      "additionalProperties": false,
      "description": "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "additionalProperties": false,
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "description": "`name` is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "`namespace` is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "`path` is an optional URL path which will be sent in any request to this service.",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
      "additionalProperties": false,
      "description": "ValidatingWebhook describes an admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig",
          "description": "ClientConfig defines how to communicate with the hook. Required"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.",
          "type": "string"
        },
        "matchConditions": {
          "description": "MatchConditions is a list of conditions that must be met for a request to be sent to this webhook. Match conditions filter requests that have already been matched by the rules, namespaceSelector, and objectSelector. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.\n\nThe exact matching logic is (in order):\n  1. If ANY matchCondition evaluates to FALSE, the webhook is skipped.\n  2. If ALL matchConditions evaluate to TRUE, the webhook is called.\n  3. If any matchCondition evaluates to an error (but none are FALSE):\n     - If failurePolicy=Fail, reject the request\n     - If failurePolicy=Ignore, the error is ignored and the webhook is skipped",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"",
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "rules": {
          "description": "Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "sideEffects": {
          "description": "SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "additionalProperties": false,
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook",
      "properties": {
        "caBundle": {
          "description": "`caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference",
          "description": "`service` is a reference to the service for this webhook. Either `service` or `url` must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "`url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "additionalProperties": false,
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet",
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\"."
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "additionalProperties": false,
      "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment",
          "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate."
        },
        "type": {
          "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "additionalProperties": false,
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxSurge": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption."
        },
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "additionalProperties": false,
      "description": "Spec to control the desired behavior of rolling update.",
      "properties": {
        "maxSurge": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods."
        },
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "additionalProperties": false,
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable."
        },
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetOrdinals": {
      "additionalProperties": false,
      "description": "StatefulSetOrdinals describes the policy used for replica ordinal assignment in this StatefulSet.",
      "properties": {
        "start": {
          "description": "start is the number representing the first replica's index. It may be used to number replicas from an alternate index (eg: 1-indexed) over the default 0-indexed names, or to orchestrate progressive movement of replicas from one StatefulSet to another. If set, replica indices will be in the range:\n  [.spec.ordinals.start, .spec.ordinals.start + .spec.replicas).\nIf unset, defaults to 0. Replica indices will be in the range:\n  [0, .spec.replicas).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy": {
      "additionalProperties": false,
      "description": "StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates.",
      "properties": {
        "whenDeleted": {
          "description": "WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.",
          "type": "string"
        },
        "whenScaled": {
          "description": "WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "additionalProperties": false,
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy",
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType."
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "additionalProperties": false,
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "properties": {
        "apiVersion": {
          "description": "apiVersion is the API version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "additionalProperties": false,
      "description": "specification of a horizontal pod autoscaler.",
      "properties": {
        "maxReplicas": {
          "description": "maxReplicas is the upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.",
          "format": "int32",
          "type": "integer"
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference",
          "description": "reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource."
        },
        "targetCPUUtilizationPercentage": {
          "description": "targetCPUUtilizationPercentage is the target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicy": {
      "additionalProperties": false,
      "description": "PodFailurePolicy describes how failed pods influence the backoffLimit.",
      "properties": {
        "rules": {
          "description": "A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement": {
      "additionalProperties": false,
      "description": "PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.",
      "properties": {
        "containerName": {
          "description": "Restricts the check for exit codes to the container with the specified name. When null, the rule applies to all containers. When specified, it should match one the container or initContainer names in the pod template.",
          "type": "string"
        },
        "operator": {
          "description": "Represents the relationship between the container exit code(s) and the specified values. Containers completed with success (exit code 0) are excluded from the requirement check. Possible values are:\n\n- In: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is in the set of specified values.\n- NotIn: the requirement is satisfied if at least one container exit code\n  (might be multiple if there are multiple containers not restricted\n  by the 'containerName' field) is not in the set of specified values.\nAdditional values are considered to be added in the future. Clients should react to an unknown operator by assuming the requirement is not satisfied.",
          "type": "string"
        },
        "values": {
          "description": "Specifies the set of values. Each returned container exit code (might be multiple in case of multiple containers) is checked against this set of values with respect to the operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot be used for the In operator. At least one element is required. At most 255 elements are allowed.",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "operator",
        "values"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern": {
      "additionalProperties": false,
      "description": "PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.",
      "properties": {
        "status": {
          "description": "Specifies the required Pod condition status. To match a pod condition it is required that the specified status equals the pod condition status. Defaults to True.",
          "type": "string"
        },
        "type": {
          "description": "Specifies the required Pod condition type. To match a pod condition it is required that specified type equals the pod condition type.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.PodFailurePolicyRule": {
      "additionalProperties": false,
      "description": "PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.",
      "properties": {
        "action": {
          "description": "Specifies the action taken on a pod failure when the requirements are satisfied. Possible values are:\n\n- FailJob: indicates that the pod's job is marked as Failed and all\n  running pods are terminated.\n- FailIndex: indicates that the pod's index is marked as Failed and will\n  not be restarted.\n- Ignore: indicates that the counter towards the .backoffLimit is not\n  incremented and a replacement pod is created.\n- Count: indicates that the pod is handled in the default way - the\n  counter towards the .backoffLimit is incremented.\nAdditional values are considered to be added in the future. Clients should react to an unknown action by skipping the rule.",
          "type": "string"
        },
        "onExitCodes": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement",
          "description": "Represents the requirement on the container exit codes."
        },
        "onPodConditions": {
          "description": "Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "action"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.SuccessPolicy": {
      "additionalProperties": false,
      "description": "SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.",
      "properties": {
        "rules": {
          "description": "rules represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded \u003e= .spec.completions`. Once any of the rules are met, the \"SucceededCriteriaMet\" condition is added, and the lingering pods are removed. The terminal state for such a Job has the \"Complete\" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.SuccessPolicyRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.SuccessPolicyRule": {
      "additionalProperties": false,
      "description": "SuccessPolicyRule describes rule for declaring a Job as succeeded. Each rule must have at least one of the \"succeededIndexes\" or \"succeededCount\" specified.",
      "properties": {
        "succeededCount": {
          "description": "succeededCount specifies the minimal required size of the actual set of the succeeded indexes for the Job. When succeededCount is used along with succeededIndexes, the check is constrained only to the set of indexes specified by succeededIndexes. For example, given that succeededIndexes is \"1-4\", succeededCount is \"3\", and completed indexes are \"1\", \"3\", and \"5\", the Job isn't declared as succeeded because only \"1\" and \"3\" indexes are considered in that rules. When this field is null, this doesn't default to any value and is never evaluated at any time. When specified it needs to be a positive integer.",
          "format": "int32",
          "type": "integer"
        },
        "succeededIndexes": {
          "description": "succeededIndexes specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job. The list of indexes must be within 0 to \".spec.completions-1\" and must not contain duplicates. At least one element is required. The indexes are represented as intervals separated by commas. The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen. The number are listed in represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as \"1,3-5,7\". When this field is null, this field doesn't default to any value and is never evaluated at any time.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestSpec": {
      "additionalProperties": false,
      "description": "CertificateSigningRequestSpec contains the certificate request.",
      "properties": {
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.\n\nThe v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.\n\nCertificate signers may not honor this field for various reasons:\n\n  1. Old signer that is unaware of the field (such as the in-tree\n     implementations prior to v1.22)\n  2. Signer whose configured maximum is shorter than the requested duration\n  3. Signer whose configured minimum is longer than the requested duration\n\nThe minimum valid value for expirationSeconds is 600, i.e. 10 minutes.",
          "format": "int32",
          "type": "integer"
        },
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "object"
        },
        "groups": {
          "description": "groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "request": {
          "description": "request contains an x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "signerName": {
          "description": "signerName indicates the requested signer, and is a qualified name.\n\nList/watch requests for CertificateSigningRequests can filter on this field using a \"spec.signerName=NAME\" fieldSelector.\n\nWell-known Kubernetes signers are:\n 1. \"kubernetes.io/kube-apiserver-client\": issues client certificates that can be used to authenticate to kube-apiserver.\n  Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 2. \"kubernetes.io/kube-apiserver-client-kubelet\": issues client certificates that kubelets use to authenticate to kube-apiserver.\n  Requests for this signer can be auto-approved by the \"csrapproving\" controller in kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n 3. \"kubernetes.io/kubelet-serving\" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.\n  Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the \"csrsigning\" controller in kube-controller-manager.\n\nMore details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers\n\nCustom signerNames can also be specified. The signer defines:\n 1. Trust distribution: how trust (CA bundles) are distributed.\n 2. Permitted subjects: and behavior when a disallowed subject is requested.\n 3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n 4. Required, permitted, or forbidden key usages / extended key usages.\n 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n 6. Whether or not requests for CA certificates are allowed.",
          "type": "string"
        },
        "uid": {
          "description": "uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        },
        "usages": {
          "description": "usages specifies a set of key usages requested in the issued certificate.\n\nRequests for TLS client certificates typically request: \"digital signature\", \"key encipherment\", \"client auth\".\n\nRequests for TLS serving certificates typically request: \"key encipherment\", \"digital signature\", \"server auth\".\n\nValid values are:\n \"signing\", \"digital signature\", \"content commitment\",\n \"key encipherment\", \"key agreement\", \"data encipherment\",\n \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\",\n \"server auth\", \"client auth\",\n \"code signing\", \"email protection\", \"s/mime\",\n \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\",\n \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "username": {
          "description": "username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        }
      },
      "required": [
        "request",
        "signerName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "additionalProperties": false,
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
          "description": "Describes node affinity scheduling rules for the pod."
        },
        "podAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AppArmorProfile": {
      "additionalProperties": false,
      "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "additionalProperties": false,
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.",
          "type": "string"
        },
        "diskName": {
          "description": "diskName is the Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "diskURI is the URI of data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "additionalProperties": false,
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "secretNamespace": {
          "description": "secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod",
          "type": "string"
        },
        "shareName": {
          "description": "shareName is the azure Share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "additionalProperties": false,
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "shareName is the azure share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "Represents storage that is managed by an external CSI volume driver",
      "properties": {
        "controllerExpandSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "controllerPublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "driver": {
          "description": "driver is the name of the driver to use for this volume. Required.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".",
          "type": "string"
        },
        "nodeExpandSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "nodeExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeExpandVolume call. This field is optional, may be omitted if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "nodeStageSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed."
        },
        "readOnly": {
          "description": "readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "volumeAttributes of the volume to publish.",
          "type": "object"
        },
        "volumeHandle": {
          "description": "volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.",
          "type": "string"
        }
      },
      "required": [
        "driver",
        "volumeHandle"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
        },
        "readOnly": {
          "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "additionalProperties": false,
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "drop": {
          "description": "Removed capabilities",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "secretRef is Optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "additionalProperties": false,
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ClusterTrustBundleProjection": {
      "additionalProperties": false,
      "description": "ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Select all ClusterTrustBundles that match this label selector.  Only has effect if signerName is set.  Mutually-exclusive with name.  If unset, interpreted as \"match nothing\".  If set but empty, interpreted as \"match everything\"."
        },
        "name": {
          "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.",
          "type": "string"
        },
        "optional": {
          "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.",
          "type": "boolean"
        },
        "path": {
          "description": "Relative path from the volume root to write the bundle.",
          "type": "string"
        },
        "signerName": {
          "description": "Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "additionalProperties": false,
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "additionalProperties": false,
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "additionalProperties": false,
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "additionalProperties": false,
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "additionalProperties": false,
      "description": "ContainerPort represents a network port in a single container.",
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
          "format": "int32",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
          "type": "string"
        }
      },
      "required": [
        "containerPort"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerResizePolicy": {
      "additionalProperties": false,
      "description": "ContainerResizePolicy represents resource resize policy for the container.",
      "properties": {
        "resourceName": {
          "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
          "type": "string"
        },
        "restartPolicy": {
          "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
          "type": "string"
        }
      },
      "required": [
        "resourceName",
        "restartPolicy"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "additionalProperties": false,
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "additionalProperties": false,
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported."
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "additionalProperties": false,
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "additionalProperties": false,
      "description": "EnvFromSource represents the source of a set of ConfigMaps or Secrets",
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
          "description": "The ConfigMap to select from"
        },
        "prefix": {
          "description": "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
          "description": "The Secret to select from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "additionalProperties": false,
      "description": "EnvVar represents an environment variable present in a Container.",
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if value is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "additionalProperties": false,
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralContainer": {
      "additionalProperties": false,
      "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "image": {
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Lifecycle is not allowed for ephemeral containers."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Probes are not allowed for ephemeral containers."
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
          "type": "string"
        },
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Probes are not allowed for ephemeral containers."
        },
        "resizePolicy": {
          "description": "Resources resize policy for the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerResizePolicy"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod."
        },
        "restartPolicy": {
          "description": "Restart policy for the container to manage the restart behavior of each container within a pod. This may only be set for init containers. You cannot set this field on ephemeral containers.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext."
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Probes are not allowed for ephemeral containers."
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
          "type": "string"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "devicePath"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "mountPath"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "properties": {
        "volumeClaimTemplate": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate",
          "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `\u003cpod name\u003e-\u003cvolume name\u003e` where `\u003cvolume name\u003e` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "additionalProperties": false,
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "lun is Optional: FC target lun number",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "wwids": {
          "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "secretRef is Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "additionalProperties": false,
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "format": "int32",
          "type": "integer"
        },
        "pdName": {
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GRPCAction": {
      "additionalProperties": false,
      "description": "GRPCAction specifies an action involving a GRPC service.",
      "properties": {
        "port": {
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
          "format": "int32",
          "type": "integer"
        },
        "service": {
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "repository is the URL",
          "type": "string"
        },
        "revision": {
          "description": "revision is the commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "endpointsNamespace": {
          "description": "endpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "additionalProperties": false,
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "additionalProperties": false,
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "properties": {
        "name": {
          "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostAlias": {
      "additionalProperties": false,
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "iqn is Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "lun is iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "iqn is the target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "lun represents iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "additionalProperties": false,
      "description": "Maps a string key to a path within a volume.",
      "properties": {
        "key": {
          "description": "key is the key to project.",
          "type": "string"
        },
        "mode": {
          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "additionalProperties": false,
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        },
        "preStop": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        },
        "stopSignal": {
          "description": "StopSignal defines which signal will be sent to a container when it is being stopped. If not specified, the default is defined by the container runtime in use. StopSignal can only be set for Pods with a non-empty .spec.os.name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LifecycleHandler": {
      "additionalProperties": false,
      "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "Exec specifies a command to execute in the container."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies an HTTP GET request to perform."
        },
        "sleep": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SleepAction",
          "description": "Sleep represents a duration that the container should sleep."
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for backward compatibility. There is no validation of this field and lifecycle hooks will fail at runtime when it is specified."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "additionalProperties": false,
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "additionalProperties": false,
      "description": "Local represents directly-attached storage with node affinity",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.",
          "type": "string"
        },
        "path": {
          "description": "path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "additionalProperties": false,
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "additionalProperties": false,
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "additionalProperties": false,
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "additionalProperties": false,
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "additionalProperties": false,
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "required": [
        "fieldPath"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "additionalProperties": false,
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus",
          "description": "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimCondition contains details about state of pvc",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "lastProbeTime is the time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "lastTransitionTime is the time the condition transitioned from one status to another."
        },
        "message": {
          "description": "message is the human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"Resizing\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required",
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."
        },
        "dataSourceRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While DataSource ignores disallowed values (dropping them), DataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "selector is a label query over volumes to consider for binding."
        },
        "storageClassName": {
          "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
          "type": "object"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "capacity represents the actual resources of the underlying volume.",
          "type": "object"
        },
        "conditions": {
          "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "phase represents the current phase of PersistentVolumeClaim.\n\n",
          "type": "string"
        },
        "resizeStatus": {
          "description": "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "additionalProperties": false,
      "description": "PersistentVolumeSpec is the specification of a persistent volume.",
      "properties": {
        "accessModes": {
          "description": "accessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type are redirected to the disk.csi.azure.com CSI driver."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource",
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod. Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type are redirected to the file.csi.azure.com CSI driver."
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "capacity is the description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
          "type": "object"
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource",
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime. Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported."
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource",
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. Deprecated: Cinder is deprecated. All operations for the in-tree cinder type are redirected to the cinder.csi.openstack.org CSI driver. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "claimRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "claimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding",
          "x-kubernetes-map-type": "granular"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource",
          "description": "csi represents storage that is handled by an external CSI driver."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource",
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running. Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported."
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource",
          "description": "glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "hostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource",
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin."
        },
        "local": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource",
          "description": "local represents directly-attached storage with node affinity"
        },
        "mountOptions": {
          "description": "mountOptions is the list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "nfs represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity",
          "description": "nodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume."
        },
        "persistentVolumeReclaimPolicy": {
          "description": "persistentVolumeReclaimPolicy defines what happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
          "type": "string"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine. Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported."
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine. Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate is on."
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime. Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported."
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource",
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource",
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported."
        },
        "storageClassName": {
          "description": "storageClassName is the name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
          "type": "string"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource",
          "description": "storageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod. Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported. More info: https://examples.k8s.io/volumes/storageos/README.md"
        },
        "volumeAttributesClassName": {
          "description": "Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed. When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass. This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class. For an unbound PersistentVolume, the volumeAttributesClassName will be matched with unbound PersistentVolumeClaims during the binding process. This is a beta field and requires enabling VolumeAttributesClass feature (off by default).",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.",
          "type": "string"
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine. Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type are redirected to the csi.vsphere.vmware.com CSI driver."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Photon Controller persistent disk resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "pdID is the ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "additionalProperties": false,
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "additionalProperties": false,
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods."
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "mismatchLabelKeys": {
          "description": "MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces."
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "additionalProperties": false,
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "additionalProperties": false,
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "additionalProperties": false,
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Name is this DNS resolver option's name. Required.",
          "type": "string"
        },
        "value": {
          "description": "Value is this DNS resolver option's value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodOS": {
      "additionalProperties": false,
      "description": "PodOS defines the OS parameters of a pod.",
      "properties": {
        "name": {
          "description": "Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "additionalProperties": false,
      "description": "PodReadinessGate contains the reference to a pod condition",
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      },
      "required": [
        "conditionType"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodResourceClaim": {
      "additionalProperties": false,
      "description": "PodResourceClaim references exactly one ResourceClaim, either directly or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim for the pod.\n\nIt adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.",
      "properties": {
        "name": {
          "description": "Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.",
          "type": "string"
        },
        "resourceClaimName": {
          "description": "ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must be set.",
          "type": "string"
        },
        "resourceClaimTemplateName": {
          "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.\n\nExactly one of ResourceClaimName and ResourceClaimTemplateName must be set.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSchedulingGate": {
      "additionalProperties": false,
      "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.",
      "properties": {
        "name": {
          "description": "Name of the scheduling gate. Each scheduling gate must have a unique name field.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "additionalProperties": false,
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "additionalProperties": false,
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "properties": {
        "fsType": {
          "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "additionalProperties": false,
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "additionalProperties": false,
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "Exec specifies a command to execute in the container."
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "grpc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction",
          "description": "GRPC specifies a GRPC HealthCheckRequest."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies an HTTP GET request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "TCPSocket specifies a connection to a TCP port."
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "format": "int64",
          "type": "integer"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "description": "sources is the list of volume projections. Each entry in this list handles one source.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "user to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "pool": {
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "pool": {
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "additionalProperties": false,
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Specifies the output format of the exposed resources, defaults to \"1\""
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "additionalProperties": false,
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "additionalProperties": false,
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\"",
          "type": "string"
        },
        "gateway": {
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "sslEnabled is the flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "additionalProperties": false,
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SeccompProfile": {
      "additionalProperties": false,
      "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "additionalProperties": false,
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "additionalProperties": false,
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "additionalProperties": false,
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretReference": {
      "additionalProperties": false,
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "properties": {
        "name": {
          "description": "name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "additionalProperties": false,
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "additionalProperties": false,
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "appArmorProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AppArmorProfile",
          "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile overrides the pod's appArmorProfile. Note that this field cannot be set when spec.os.name is windows."
        },
        "capabilities": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod \u0026 container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows."
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "additionalProperties": false,
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "properties": {
        "audience": {
          "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "description": "path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServicePort": {
      "additionalProperties": false,
      "description": "ServicePort contains information on service's port.",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either:\n\n* Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names).\n\n* Kubernetes-defined prefixed names:\n  * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-\n  * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455\n  * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455\n\n* Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "description": "The port that will be exposed by this service.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec": {
      "additionalProperties": false,
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "properties": {
        "allocateLoadBalancerNodePorts": {
          "description": "allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type.",
          "type": "boolean"
        },
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "clusterIPs": {
          "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "externalName": {
          "description": "externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\".",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.",
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type). This field cannot be updated once set.",
          "format": "int32",
          "type": "integer"
        },
        "internalTrafficPolicy": {
          "description": "InternalTrafficPolicy describes how nodes distribute service traffic they receive on the ClusterIP. If set to \"Local\", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).",
          "type": "string"
        },
        "ipFamilies": {
          "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ipFamilyPolicy": {
          "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.",
          "type": "string"
        },
        "loadBalancerClass": {
          "description": "loadBalancerClass is the class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.",
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. Deprecated: This field was under-specified and its meaning varies across implementations. Using it is non-portable and it may not support dual-stack. Users are encouraged to use implementation-specific annotations when available.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
          "description": "sessionAffinityConfig contains the configurations of session affinity."
        },
        "trafficDistribution": {
          "description": "TrafficDistribution offers a way to express preferences for how traffic is distributed to Service endpoints. Implementations can use this field as a hint, but are not required to guarantee strict adherence. If the field is not set, the implementation will apply its default routing strategy. If set to \"PreferClose\", implementations should prioritize endpoints that are in the same zone.",
          "type": "string"
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "additionalProperties": false,
      "description": "SessionAffinityConfig represents the configurations of session affinity.",
      "properties": {
        "clientIP": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig",
          "description": "clientIP contains the configurations of Client IP based session affinity."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SleepAction": {
      "additionalProperties": false,
      "description": "SleepAction describes a \"sleep\" action.",
      "properties": {
        "seconds": {
          "description": "Seconds is the number of seconds to sleep.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "seconds"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "additionalProperties": false,
      "description": "Sysctl defines a kernel parameter to be set",
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "additionalProperties": false,
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "additionalProperties": false,
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\n",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\n",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "additionalProperties": false,
      "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "key",
        "values"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "additionalProperties": false,
      "description": "A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
      "properties": {
        "matchLabelExpressions": {
          "description": "A list of topology selector requirements by labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "additionalProperties": false,
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "format": "int32",
          "type": "integer"
        },
        "minDomains": {
          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "nodeAffinityPolicy": {
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
          "type": "string"
        },
        "nodeTaintsPolicy": {
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
          "type": "string"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\n",
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "additionalProperties": false,
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.Volume": {
      "additionalProperties": false,
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
          "description": "configMap represents a configMap that should populate this volume"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
          "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
          "description": "downwardAPI represents downward API about the pod that should populate this volume"
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        },
        "ephemeral": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource",
          "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "gitRepo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
          "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
          "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
        },
        "name": {
          "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
          "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "projected": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
          "description": "projected items for all in one resources secrets, configmaps, and downward API"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
          "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
          "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "additionalProperties": false,
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "additionalProperties": false,
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "additionalProperties": false,
      "description": "VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.",
      "properties": {
        "required": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "required specifies hard node constraints that must be met."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "additionalProperties": false,
      "description": "Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.",
      "properties": {
        "clusterTrustBundle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ClusterTrustBundleProjection",
          "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written into the pod filesystem.  Esoteric PEM features such as inter-block comments and block headers are stripped.  Certificates are deduplicated. The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time."
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
          "description": "configMap information about the configMap data to project"
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
          "description": "downwardAPI information about the downwardAPI data to project"
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
          "description": "secret information about the secret data to project"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
          "description": "serviceAccountToken is information about the serviceAccountToken data to project"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a vSphere volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "volumePath is the path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "additionalProperties": false,
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "additionalProperties": false,
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
          "type": "string"
        },
        "hostProcess": {
          "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
          "type": "boolean"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "additionalProperties": false,
      "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend",
          "description": "backend defines the referenced service endpoint to which the traffic will be forwarded to."
        },
        "path": {
          "description": "path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value \"Exact\" or \"Prefix\".",
          "type": "string"
        },
        "pathType": {
          "description": "pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types.",
          "type": "string"
        }
      },
      "required": [
        "pathType",
        "backend"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
      "additionalProperties": false,
      "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://\u003chost\u003e/\u003cpath\u003e?\u003csearchpart\u003e -\u003e backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
      "properties": {
        "paths": {
          "description": "paths is a collection of paths that map requests to backends.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IPBlock": {
      "additionalProperties": false,
      "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.0/24\",\"2001:db8::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
      "properties": {
        "cidr": {
          "description": "cidr is a string representing the IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\"",
          "type": "string"
        },
        "except": {
          "description": "except is a slice of CIDRs that should not be included within an IPBlock Valid examples are \"192.168.1.0/24\" or \"2001:db8::/64\" Except values will be rejected if they are outside the cidr range",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "cidr"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressBackend": {
      "additionalProperties": false,
      "description": "IngressBackend describes all endpoints for a given service and port.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with \"Service\"."
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressServiceBackend",
          "description": "service references a service as a backend. This is a mutually exclusive setting with \"Resource\"."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressClassParametersReference": {
      "additionalProperties": false,
      "description": "IngressClassParametersReference identifies an API object. This can be used to specify a cluster or namespace-scoped resource.",
      "properties": {
        "apiGroup": {
          "description": "apiGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "kind is the type of resource being referenced.",
          "type": "string"
        },
        "name": {
          "description": "name is the name of resource being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the resource being referenced. This field is required when scope is set to \"Namespace\" and must be unset when scope is set to \"Cluster\".",
          "type": "string"
        },
        "scope": {
          "description": "scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressClassSpec": {
      "additionalProperties": false,
      "description": "IngressClassSpec provides information about the class of an Ingress.",
      "properties": {
        "controller": {
          "description": "controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.",
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassParametersReference",
          "description": "parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressRule": {
      "additionalProperties": false,
      "description": "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
      "properties": {
        "host": {
          "description": "host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to\n   the IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.\n\nhost can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressServiceBackend": {
      "additionalProperties": false,
      "description": "IngressServiceBackend references a Kubernetes Service as a Backend.",
      "properties": {
        "name": {
          "description": "name is the referenced service. The service must exist in the same namespace as the Ingress object.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceBackendPort",
          "description": "port of the referenced service. A port name or port number is required for a IngressServiceBackend."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressSpec": {
      "additionalProperties": false,
      "description": "IngressSpec describes the Ingress the user wishes to exist.",
      "properties": {
        "defaultBackend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend",
          "description": "defaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller."
        },
        "ingressClassName": {
          "description": "ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -\u003e IngressClass -\u003e Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.",
          "type": "string"
        },
        "rules": {
          "description": "rules is a list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "tls": {
          "description": "tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressTLS": {
      "additionalProperties": false,
      "description": "IngressTLS describes the transport layer security associated with an ingress.",
      "properties": {
        "hosts": {
          "description": "hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "secretName": {
          "description": "secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the \"Host\" header is used for routing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "additionalProperties": false,
      "description": "NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8",
      "properties": {
        "ports": {
          "description": "ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "to": {
          "description": "to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "additionalProperties": false,
      "description": "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
      "properties": {
        "from": {
          "description": "from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ports": {
          "description": "ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "additionalProperties": false,
      "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
      "properties": {
        "ipBlock": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock",
          "description": "ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector."
        },
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "additionalProperties": false,
      "description": "NetworkPolicyPort describes a port to allow traffic on",
      "properties": {
        "endPort": {
          "description": "endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched."
        },
        "protocol": {
          "description": "protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "additionalProperties": false,
      "description": "NetworkPolicySpec provides the specification of a NetworkPolicy",
      "properties": {
        "egress": {
          "description": "egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "ingress": {
          "description": "ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace."
        },
        "policyTypes": {
          "description": "policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are [\"Ingress\"], [\"Egress\"], or [\"Ingress\", \"Egress\"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "podSelector"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.ServiceBackendPort": {
      "additionalProperties": false,
      "description": "ServiceBackendPort is the service port being referenced.",
      "properties": {
        "name": {
          "description": "name is the name of the port on the Service. This is a mutually exclusive setting with \"Number\".",
          "type": "string"
        },
        "number": {
          "description": "number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with \"Name\".",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.policy.v1.PodDisruptionBudgetSpec": {
      "additionalProperties": false,
      "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\"."
        },
        "minAvailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\"."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.",
          "x-kubernetes-patch-strategy": "replace"
        },
        "unhealthyPodEvictionPolicy": {
          "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods should be considered for eviction. Current implementation considers healthy pods, as pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\nValid policies are IfHealthyBudget and AlwaysAllow. If no policy is specified, the default behavior will be used, which corresponds to the IfHealthyBudget policy.\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"), but not yet healthy can be evicted only if the guarded application is not disrupted (status.currentHealthy is at least equal to status.desiredHealthy). Healthy pods will be subject to the PDB for eviction.\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"), but not yet healthy are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met. This means perspective running pods of a disrupted application might not get a chance to become healthy. Healthy pods will be subject to the PDB for eviction.\n\nAdditional policies may be added in the future. Clients making eviction decisions should disallow eviction of unhealthy pods if they encounter an unrecognized policy in this field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "additionalProperties": false,
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "additionalProperties": false,
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \"\" represents the core API group and \"*\" represents all API groups.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to. '*' represents all resources.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.RoleRef": {
      "additionalProperties": false,
      "description": "RoleRef contains information that points to the role being used",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.rbac.v1.Subject": {
      "additionalProperties": false,
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition": {
      "additionalProperties": false,
      "description": "CustomResourceColumnDefinition specifies a column for server side printing.",
      "properties": {
        "description": {
          "description": "description is a human readable description of this column.",
          "type": "string"
        },
        "format": {
          "description": "format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        },
        "jsonPath": {
          "description": "jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.",
          "type": "string"
        },
        "name": {
          "description": "name is a human readable name for the column.",
          "type": "string"
        },
        "priority": {
          "description": "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "jsonPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion": {
      "additionalProperties": false,
      "description": "CustomResourceConversion describes how to convert different versions of a CR.",
      "properties": {
        "strategy": {
          "description": "strategy specifies how custom resources are converted between versions. Allowed values are: - `\"None\"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `\"Webhook\"`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.",
          "type": "string"
        },
        "webhook": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion",
          "description": "webhook describes how to call the conversion webhook. Required when `strategy` is set to `\"Webhook\"`."
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames": {
      "additionalProperties": false,
      "description": "CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition",
      "properties": {
        "categories": {
          "description": "categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.",
          "type": "string"
        },
        "listKind": {
          "description": "listKind is the serialized kind of the list for this resource. Defaults to \"`kind`List\".",
          "type": "string"
        },
        "plural": {
          "description": "plural is the plural name of the resource to serve. The custom resources are served under `/apis/\u003cgroup\u003e/\u003cversion\u003e/.../\u003cplural\u003e`. Must match the name of the CustomResourceDefinition (in the form `\u003cnames.plural\u003e.\u003cgroup\u003e`). Must be all lowercase.",
          "type": "string"
        },
        "shortNames": {
          "description": "shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get \u003cshortname\u003e`. It must be all lowercase.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "singular": {
          "description": "singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.",
          "type": "string"
        }
      },
      "required": [
        "plural",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec": {
      "additionalProperties": false,
      "description": "CustomResourceDefinitionSpec describes how a user wants their resource to appear",
      "properties": {
        "conversion": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion",
          "description": "conversion defines conversion settings for the CRD."
        },
        "group": {
          "description": "group is the API group of the defined custom resource. The custom resources are served under `/apis/\u003cgroup\u003e/...`. Must match the name of the CustomResourceDefinition (in the form `\u003cnames.plural\u003e.\u003cgroup\u003e`).",
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
          "description": "names specify the resource and kind names for the custom resource."
        },
        "preserveUnknownFields": {
          "description": "preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.",
          "type": "boolean"
        },
        "scope": {
          "description": "scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.",
          "type": "string"
        },
        "versions": {
          "description": "versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA \u003e beta \u003e alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "group",
        "names",
        "scope",
        "versions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion": {
      "additionalProperties": false,
      "description": "CustomResourceDefinitionVersion describes a version for CRD.",
      "properties": {
        "additionalPrinterColumns": {
          "description": "additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "deprecated": {
          "description": "deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.",
          "type": "boolean"
        },
        "deprecationWarning": {
          "description": "deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.",
          "type": "string"
        },
        "name": {
          "description": "name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/\u003cgroup\u003e/\u003cversion\u003e/...` if `served` is true.",
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation",
          "description": "schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource."
        },
        "selectableFields": {
          "description": "selectableFields specifies paths to fields that may be used as field selectors. A maximum of 8 selectable fields are allowed. See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "served": {
          "description": "served is a flag enabling/disabling this version from being served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.",
          "type": "boolean"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources",
          "description": "subresources specify what subresources this version of the defined custom resource have."
        }
      },
      "required": [
        "name",
        "served",
        "storage"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale": {
      "additionalProperties": false,
      "description": "CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.",
      "properties": {
        "labelSelectorPath": {
          "description": "labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "type": "string"
        }
      },
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus": {
      "description": "CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources": {
      "additionalProperties": false,
      "description": "CustomResourceSubresources defines the status and scale subresources for CustomResources.",
      "properties": {
        "scale": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale",
          "description": "scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus",
          "description": "status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation": {
      "additionalProperties": false,
      "description": "CustomResourceValidation is a list of validation methods for CustomResources.",
      "properties": {
        "openAPIV3Schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps",
          "description": "openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation": {
      "additionalProperties": false,
      "description": "ExternalDocumentation allows referencing an external resource for extended documentation.",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "additionalProperties": false,
      "description": "JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "allOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "anyOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "default": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
          "description": "default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false."
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\\\d{3})\\\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\\\d{3}[- ]?\\\\d{2}[- ]?\\\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "format": "int64",
          "type": "integer"
        },
        "maxLength": {
          "format": "int64",
          "type": "integer"
        },
        "maxProperties": {
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "format": "double",
          "type": "number"
        },
        "minItems": {
          "format": "int64",
          "type": "integer"
        },
        "minLength": {
          "format": "int64",
          "type": "integer"
        },
        "minProperties": {
          "format": "int64",
          "type": "integer"
        },
        "minimum": {
          "format": "double",
          "type": "number"
        },
        "multipleOf": {
          "format": "double",
          "type": "number"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:\n\n1) anyOf:\n   - type: integer\n   - type: string\n2) allOf:\n   - anyOf:\n     - type: integer\n     - type: string\n   - ... zero or more",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.\n\nThis tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).\n\nThe properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "x-kubernetes-list-type": {
          "description": "x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic lists will be entirely replaced when updated. This extension\n     may be used on any type of list (struct, scalar, ...).\n2) `set`:\n     Sets are lists that must not have multiple items with the same value. Each\n     value must be a scalar, an object with x-kubernetes-map-type `atomic` or an\n     array with x-kubernetes-list-type `atomic`.\n3) `map`:\n     These lists are like maps in that their elements have a non-index key\n     used to identify them. Order is preserved upon merge. The map tag\n     must only be used on a list with elements of type object.\nDefaults to atomic for arrays.",
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:\n\n1) `granular`:\n     These maps are actual maps (key-value pairs) and each fields are independent\n     from each other (they can each be manipulated by separate actors). This is\n     the default behaviour for all maps.\n2) `atomic`: the list is treated as a single entity, like a scalar.\n     Atomic maps will be entirely replaced when updated.",
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.",
          "type": "boolean"
        },
        "x-kubernetes-validations": {
          "description": "x-kubernetes-validations describes a list of validation rules written in the CEL expression language.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "rule"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "rule",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray": {
      "description": "JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool": {
      "description": "JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray": {
      "description": "JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField": {
      "additionalProperties": false,
      "description": "SelectableField specifies the JSON path of a field that may be used with field selectors.",
      "properties": {
        "jsonPath": {
          "description": "jsonPath is a simple JSON path which is evaluated against each custom resource to produce a field selector value. Only JSON paths without the array notation are allowed. Must point to a field of type string, boolean or integer. Types with enum values and strings with formats are allowed. If jsonPath refers to absent field in a resource, the jsonPath evaluates to an empty string. Must not point to metdata fields. Required.",
          "type": "string"
        }
      },
      "required": [
        "jsonPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference": {
      "additionalProperties": false,
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "description": "name is the name of the service. Required",
          "type": "string"
        },
        "namespace": {
          "description": "namespace is the namespace of the service. Required",
          "type": "string"
        },
        "path": {
          "description": "path is an optional URL path at which the webhook will be contacted.",
          "type": "string"
        },
        "port": {
          "description": "port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule": {
      "additionalProperties": false,
      "description": "ValidationRule describes a validation rule written in the CEL expression language.",
      "properties": {
        "fieldPath": {
          "description": "fieldPath represents the field path returned when the validation fails. It must be a relative JSON path (i.e. with array notation) scoped to the location of this x-kubernetes-validations extension in the schema and refer to an existing field. e.g. when validation checks if a specific attribute `foo` under a map `testMap`, the fieldPath could be set to `.testMap.foo` If the validation checks two lists must have unique attributes, the fieldPath could be set to either of the list: e.g. `.testList` It does not support list numeric index. It supports child operation to refer to an existing field currently. Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/) for more info. Numeric index of array is not supported. For field name which contains special characters, use `['specialName']` to refer the field name. e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to `.testList['foo.34$']`",
          "type": "string"
        },
        "message": {
          "description": "Message represents the message displayed when validation fails. The message is required if the Rule contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\"",
          "type": "string"
        },
        "messageExpression": {
          "description": "MessageExpression declares a CEL expression that evaluates to the validation failure message that is returned when this rule fails. Since messageExpression is used as a failure message, it must evaluate to a string. If both message and messageExpression are present on a rule, then messageExpression will be used if validation fails. If messageExpression results in a runtime error, the runtime error is logged, and the validation failure message is produced as if the messageExpression field were unset. If messageExpression evaluates to an empty string, a string with only spaces, or a string that contains line breaks, then the validation failure message will also be produced as if the messageExpression field were unset, and the fact that messageExpression produced an empty string/string with only spaces/string with line breaks will be logged. messageExpression has access to all the same variables as the rule; the only difference is the return type. Example: \"x must be less than max (\"+string(self.max)+\")\"",
          "type": "string"
        },
        "optionalOldSelf": {
          "description": "optionalOldSelf is used to opt a transition rule into evaluation even when the object is first created, or if the old object is missing the value.\n\nWhen enabled `oldSelf` will be a CEL optional whose value will be `None` if there is no old value, or when the object is initially created.\n\nYou may check for presence of oldSelf using `oldSelf.hasValue()` and unwrap it after checking using `oldSelf.value()`. Check the CEL documentation for Optional types for more information: https://pkg.go.dev/github.com/google/cel-go/cel#OptionalTypes\n\nMay not be set unless `oldSelf` is used in `rule`.",
          "type": "boolean"
        },
        "reason": {
          "description": "reason provides a machine-readable validation failure reason that is returned to the caller when a request fails this validation rule. The HTTP status code returned to the caller will match the reason of the reason of the first failed validation rule. The currently supported reasons are: \"FieldValueInvalid\", \"FieldValueForbidden\", \"FieldValueRequired\", \"FieldValueDuplicate\". If not set, default to use \"FieldValueInvalid\". All future added reasons must be accepted by clients when reading this value and unknown reasons should be treated as FieldValueInvalid.",
          "type": "string"
        },
        "rule": {
          "description": "Rule represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec The Rule is scoped to the location of the x-kubernetes-validations extension in the schema. The `self` variable in the CEL expression is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status subresource: {\"rule\": \"self.status.actual \u003c= self.spec.maxDesired\"}\n\nIf the Rule is scoped to an object with properties, the accessible properties of the object are field selectable via `self.field` and field presence can be checked via `has(self.field)`. Null valued fields are treated as absent fields in CEL expressions. If the Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self` and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`. If the Rule is scoped to an array, the elements of the array are accessible via `self[i]` and also by macros and functions. If the Rule is scoped to a scalar, `self` is bound to the scalar value. Examples: - Rule scoped to a map of objects: {\"rule\": \"self.components['Widget'].priority \u003c 10\"} - Rule scoped to a list of integers: {\"rule\": \"self.values.all(value, value \u003e= 0 \u0026\u0026 value \u003c 100)\"} - Rule scoped to a string value: {\"rule\": \"self.startsWith('kube')\"}\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object and from any x-kubernetes-embedded-resource annotated objects. No other metadata properties are accessible.\n\nUnknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This includes: - Unknown field values that are preserved by object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the property schema is of an \"unknown type\". An \"unknown type\" is recursively defined as:\n  - A schema with no type and x-kubernetes-preserve-unknown-fields set to true\n  - An array where the items schema is of an \"unknown type\"\n  - An object where the additionalProperties schema is of an \"unknown type\"\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Rule accessing a property named \"namespace\": {\"rule\": \"self.__namespace__ \u003e 0\"}\n  - Rule accessing a property named \"x-prop\": {\"rule\": \"self.x__dash__prop \u003e 0\"}\n  - Rule accessing a property named \"redact__d\": {\"rule\": \"self.redact__underscores__d \u003e 0\"}\n\nEquality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\n\nIf `rule` makes use of the `oldSelf` variable it is implicitly a `transition rule`.\n\nBy default, the `oldSelf` variable is the same type as `self`. When `optionalOldSelf` is true, the `oldSelf` variable is a CEL optional\n variable whose value() is the same type as `self`.\nSee the documentation for the `optionalOldSelf` field for details.\n\nTransition rules by default are applied only on UPDATE requests and are skipped if an old value could not be found. You can opt a transition rule into unconditional evaluation by setting `optionalOldSelf` to true.",
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig": {
      "additionalProperties": false,
      "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook.",
      "properties": {
        "caBundle": {
          "description": "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference",
          "description": "service is a reference to the service for this webhook. Either service or url must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion": {
      "additionalProperties": false,
      "description": "WebhookConversion describes how to call a conversion webhook",
      "properties": {
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig",
          "description": "clientConfig is the instructions for how to call the webhook if strategy is `Webhook`."
        },
        "conversionReviewVersions": {
          "description": "conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "conversionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Duration": {
      "description": "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "additionalProperties": false,
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement",
            "default": {}
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "additionalProperties": false,
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "default": "",
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "default": "",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "additionalProperties": false,
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "additionalProperties": false,
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "default": {},
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry",
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "additionalProperties": false,
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "default": "",
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "default": "",
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "default": "",
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "additionalProperties": false,
      "description": "APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.",
      "properties": {
        "caBundle": {
          "description": "CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "Group is the API group name this server hosts",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMinimum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "format": "int32",
          "type": "integer"
        },
        "insecureSkipTLSVerify": {
          "description": "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.",
          "type": "boolean"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference",
          "description": "Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled."
        },
        "version": {
          "description": "Version is the API version this server hosts.  For example, \"v1\"",
          "type": "string"
        },
        "versionPriority": {
          "description": "VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA \u003e beta \u003e alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "additionalProperties": false,
      "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
      "properties": {
        "name": {
          "description": "Name is the name of the service",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the service",
          "type": "string"
        },
        "port": {
          "description": "If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.x-k8s.csi.secrets-store.apis.v1.SecretObject": {
      "additionalProperties": false,
      "description": "SecretObject defines the desired state of synced K8s secret objects",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "annotations of k8s secret object",
          "type": "object"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/io.x-k8s.csi.secrets-store.apis.v1.SecretObjectData"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "labels of K8s secret object",
          "type": "object"
        },
        "secretName": {
          "description": "name of the K8s secret object",
          "type": "string"
        },
        "type": {
          "description": "type of K8s secret object",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.x-k8s.csi.secrets-store.apis.v1.SecretObjectData": {
      "additionalProperties": false,
      "description": "SecretObjectData defines the desired state of synced K8s secret object data",
      "properties": {
        "key": {
          "description": "data field to populate",
          "type": "string"
        },
        "objectName": {
          "description": "name of the object to sync",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClassSpec": {
      "additionalProperties": false,
      "description": "SecretProviderClassSpec defines the desired state of SecretProviderClass",
      "properties": {
        "parameters": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Configuration for specific provider",
          "type": "object"
        },
        "provider": {
          "description": "Configuration for provider name",
          "type": "string"
        },
        "secretObjects": {
          "items": {
            "$ref": "#/definitions/io.x-k8s.csi.secrets-store.apis.v1.SecretObject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor": {
      "additionalProperties": false,
      "description": "PodMonitor defines monitoring for a set of pods.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitorSpec",
          "default": {},
          "description": "Specification of desired Pod selection for target discovery by Prometheus."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRule": {
      "additionalProperties": false,
      "description": "PrometheusRule defines recording and alerting rules for a Prometheus instance",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleSpec",
          "default": {},
          "description": "Specification of desired alerting rule definitions for Prometheus."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfig": {
      "additionalProperties": false,
      "description": "AlertmanagerConfig defines a namespaced AlertmanagerConfig to be aggregated across multiple namespaces configuring one Alertmanager cluster.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfigSpec",
          "default": {}
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.core.v1.Container": {
      "additionalProperties": false,
      "description": "A single application container that you want to run within a pod.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "imageRef": {
          "$ref": "#/definitions/metachart.interface.FQDNitem"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\n",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "imageRef"
      ],
      "type": "object"
    },
    "metachart.api.core.v1.ContainerList": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.core.v1.Container"
        }
      },
      "type": "object"
    },
    "metachart.api.core.v1.Pod": {
      "additionalProperties": false,
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/metachart.api.core.v1.PodSpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "metachart.api.core.v1.PodSpec": {
      "additionalProperties": false,
      "description": "PodSpec is a description of a pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "format": "int64",
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "$ref": "#/definitions/metachart.api.core.v1.ContainerList"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy."
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "ip"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostUsers": {
          "description": "Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "$ref": "#/definitions/metachart.api.core.v1.ContainerList"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "nodeName": {
          "description": "NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "x-kubernetes-map-type": "atomic"
        },
        "os": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodOS",
          "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.securityContext.supplementalGroupsPolicy - spec.containers[*].securityContext.appArmorProfile - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md",
          "type": "object"
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceClaims": {
          "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodResourceClaim"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources is the total amount of CPU and Memory resources required by all containers in the pod. It supports specifying Requests and Limits for \"cpu\" and \"memory\" resource names only. ResourceClaims are not supported.\n\nThis field enables fine-grained control over resource allocation for the entire pod, allowing resource sharing among containers in a pod.\n\nThis is an alpha field and requires enabling the PodLevelResources feature gate."
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "schedulingGates": {
          "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodSchedulingGate"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "metachart.api.internal.Image": {
      "additionalProperties": false,
      "properties": {
        "pullPolicy": {
          "enum": [
            "Always",
            "IfNotPresent"
          ],
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "required": [
        "repository",
        "tag",
        "pullPolicy"
      ],
      "type": "object"
    },
    "metachart.api.internal.volumeClaimTemplates": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim"
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecret": {
      "additionalProperties": false,
      "description": "ClusterExternalSecret is the Schema for the clusterexternalsecrets API.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecretSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.externalsecrets.v1.ClusterSecretStore": {
      "additionalProperties": false,
      "description": "ClusterSecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.externalsecrets.v1.ExternalSecret": {
      "additionalProperties": false,
      "description": "ExternalSecret is the Schema for the external-secrets API.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.ExternalSecretSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.externalsecrets.v1.SecretStore": {
      "additionalProperties": false,
      "description": "SecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1.SecretStoreSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecret": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecretSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.externalsecrets.v1alpha1.PushSecret": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.externalsecrets.v1alpha1.PushSecretSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.ACRAccessToken": {
      "additionalProperties": false,
      "description": "ACRAccessToken returns an Azure Container Registry token that can be used for pushing/pulling images. Note: by default it will return an ACR Refresh Token with full access (depending on the identity). This can be scoped down to the repository level using .spec.scope. In case scope is defined it will return an ACR Access Token.\n\nSee docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ACRAccessTokenSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.ClusterGenerator": {
      "additionalProperties": false,
      "description": "ClusterGenerator represents a cluster-wide generator which can be referenced as part of `generatorRef` fields.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ClusterGeneratorSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationToken": {
      "additionalProperties": false,
      "description": "ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an authorization token. The authorization token is valid for 12 hours. The authorizationToken returned is a base64 encoded string that can be decoded and used in a docker login command to authenticate to a registry. For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationTokenSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.Fake": {
      "additionalProperties": false,
      "description": "Fake generator is used for testing. It lets you define a static set of credentials that is always returned.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.FakeSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.GCRAccessToken": {
      "additionalProperties": false,
      "description": "GCRAccessToken generates an GCP access token that can be used to authenticate with GCR.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GCRAccessTokenSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.GithubAccessToken": {
      "additionalProperties": false,
      "description": "GithubAccessToken generates ghs_ accessToken",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GithubAccessTokenSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.Grafana": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.GrafanaSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.MFA": {
      "additionalProperties": false,
      "description": "MFA generates a new TOTP token that is compliant with RFC 6238.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.MFASpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.Password": {
      "additionalProperties": false,
      "description": "Password generates a random password based on the configuration parameters in spec. You can specify the length, characterset and other attributes.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.PasswordSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.QuayAccessToken": {
      "additionalProperties": false,
      "description": "QuayAccessToken generates Quay oauth token for pulling/pushing images",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.QuayAccessTokenSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.STSSessionToken": {
      "additionalProperties": false,
      "description": "STSSessionToken uses the GetSessionToken API to retrieve an authorization token. The authorization token is valid for 12 hours. The authorizationToken returned is a base64 encoded string that can be decoded. For more information, see GetSessionToken (https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html).",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.STSSessionTokenSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.UUID": {
      "additionalProperties": false,
      "description": "UUID generates a version 1 UUID (e56657e3-764f-11ef-a397-65231a88c216).",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.UUIDSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecret": {
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecretSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.external-secrets.apis.generators.v1alpha1.Webhook": {
      "additionalProperties": false,
      "description": "Webhook connects to a third party API server to handle the secrets generation configuration parameters in spec. You can specify the server, the token, and additional body parameters. See documentation for the full API specification for requests and responses.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.external-secrets.apis.generators.v1alpha1.WebhookSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration": {
      "additionalProperties": false,
      "description": "MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration": {
      "additionalProperties": false,
      "description": "ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.apps.v1.DaemonSet": {
      "additionalProperties": false,
      "description": "DaemonSet represents the configuration of a daemon set.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "related": {
          "properties": {
            "podmonitors": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
                }
              },
              "type": "object"
            },
            "services": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Service"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "spec": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.DaemonSetSpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.apps.v1.DaemonSetSpec": {
      "additionalProperties": false,
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "format": "int32",
          "type": "integer"
        },
        "pod": {
          "$ref": "#/definitions/metachart.api.core.v1.Pod"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "type": "integer"
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet pods with new pods."
        }
      },
      "required": [
        "pod"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.api.apps.v1.Deployment": {
      "additionalProperties": false,
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "related": {
          "properties": {
            "poddisruptionbudgets": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.io.k8s.api.policy.v1.PodDisruptionBudget"
                }
              },
              "type": "object"
            },
            "podmonitors": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
                }
              },
              "type": "object"
            },
            "services": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Service"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "spec": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.DeploymentSpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.apps.v1.DeploymentSpec": {
      "additionalProperties": false,
      "description": "DeploymentSpec is the specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the deployment is paused.",
          "type": "boolean"
        },
        "pod": {
          "$ref": "#/definitions/metachart.api.core.v1.Pod"
        },
        "progressDeadlineSeconds": {
          "description": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "type": "integer"
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        }
      },
      "required": [
        "pod"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.api.apps.v1.StatefulSet": {
      "additionalProperties": false,
      "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n  - Network: A single stable DNS and hostname.\n  - Storage: As many VolumeClaims as requested.\n\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "related": {
          "properties": {
            "poddisruptionbudgets": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.io.k8s.api.policy.v1.PodDisruptionBudget"
                }
              },
              "type": "object"
            },
            "podmonitors": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
                }
              },
              "type": "object"
            },
            "services": {
              "additionalProperties": false,
              "patternProperties": {
                "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
                  "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Service"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "spec": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.StatefulSetSpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.apps.v1.StatefulSetSpec": {
      "additionalProperties": false,
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "format": "int32",
          "type": "integer"
        },
        "ordinals": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetOrdinals",
          "description": "ordinals controls the numbering of replica indices in a StatefulSet. The default ordinals behavior assigns a \"0\" index to the first replica and increments the index by one for each additional replica requested."
        },
        "persistentVolumeClaimRetentionPolicy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy",
          "description": "persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down."
        },
        "pod": {
          "$ref": "#/definitions/metachart.api.core.v1.Pod"
        },
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "format": "int32",
          "type": "integer"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template."
        },
        "volumeClaimTemplates": {
          "$ref": "#/definitions/metachart.api.internal.volumeClaimTemplates"
        }
      },
      "required": [
        "pod"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler": {
      "additionalProperties": false,
      "description": "configuration of a horizontal pod autoscaler.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "spec defines the behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status."
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.batch.v1.CronJob": {
      "additionalProperties": false,
      "description": "CronJob represents the configuration of a single cron job.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.CronJobSpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.batch.v1.CronJobSpec": {
      "additionalProperties": false,
      "description": "CronJobSpec describes how the job execution will look like and when it will actually run.",
      "properties": {
        "concurrencyPolicy": {
          "description": "Specifies how to treat concurrent executions of a Job. Valid values are:\n\n- \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "description": "The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.",
          "format": "int32",
          "type": "integer"
        },
        "job": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.Job"
        },
        "schedule": {
          "description": "The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.",
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.",
          "format": "int64",
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "description": "The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to 3.",
          "format": "int32",
          "type": "integer"
        },
        "suspend": {
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.",
          "type": "boolean"
        },
        "timeZone": {
          "description": "The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kube-controller-manager process. The set of valid time zone names and the time zone offset is loaded from the system-wide time zone database by the API server during CronJob validation and the controller manager during execution. If no system-wide time zone database can be found a bundled version of the database is used instead. If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host configuration, the controller will stop creating new new Jobs and will create a system event with the reason UnknownTimeZone. More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones",
          "type": "string"
        }
      },
      "required": [
        "schedule",
        "job"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.api.batch.v1.Job": {
      "additionalProperties": false,
      "description": "Job represents the configuration of a single job.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.JobSpec"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.batch.v1.JobSpec": {
      "additionalProperties": false,
      "description": "JobSpec describes how the job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Specifies the duration in seconds relative to the startTime that the job may be continuously active before the system tries to terminate it; value must be positive integer. If a Job is suspended (at creation or through an update), this timer will effectively be stopped and reset when the Job is resumed again.",
          "format": "int64",
          "type": "integer"
        },
        "backoffLimit": {
          "description": "Specifies the number of retries before marking this job failed. Defaults to 6",
          "format": "int32",
          "type": "integer"
        },
        "backoffLimitPerIndex": {
          "description": "Specifies the limit for the number of retries within an index before marking this index as failed. When enabled the number of failures per index is kept in the pod's batch.kubernetes.io/job-index-failure-count annotation. It can only be set when Job's completionMode=Indexed, and the Pod's restart policy is Never. The field is immutable.",
          "format": "int32",
          "type": "integer"
        },
        "completionMode": {
          "description": "completionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.\n\n`NonIndexed` means that the Job is considered complete when there have been .spec.completions successfully completed Pods. Each Pod completion is homologous to each other.\n\n`Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is considered complete when there is one successfully completed Pod for each index. When value is `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod hostname takes the form `$(job-name)-$(index)`.\n\nMore completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.",
          "type": "string"
        },
        "completions": {
          "description": "Specifies the desired number of successfully finished pods the job should be run with.  Setting to null means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "format": "int32",
          "type": "integer"
        },
        "managedBy": {
          "description": "ManagedBy field indicates the controller that manages a Job. The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string `kubernetes.io/job-controller`, but skips reconciling Jobs with a custom value for this field. The value must be a valid domain-prefixed path (e.g. acme.io/foo) - all characters before the first \"/\" must be a valid subdomain as defined by RFC 1123. All characters trailing the first \"/\" must be valid HTTP Path characters as defined by RFC 3986. The value cannot exceed 63 characters. This field is immutable.\n\nThis field is beta-level. The job controller accepts setting the field when the feature gate JobManagedBy is enabled (enabled by default).",
          "type": "string"
        },
        "manualSelector": {
          "description": "manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector",
          "type": "boolean"
        },
        "maxFailedIndexes": {
          "description": "Specifies the maximal number of failed indexes before marking the Job as failed, when backoffLimitPerIndex is set. Once the number of failed indexes exceeds this number the entire Job is marked as Failed and its execution is terminated. When left as null the job continues execution of all of its indexes and is marked with the `Complete` Job condition. It can only be specified when backoffLimitPerIndex is set. It can be null or up to completions. It is required and must be less than or equal to 10^4 when is completions greater than 10^5.",
          "format": "int32",
          "type": "integer"
        },
        "parallelism": {
          "description": "Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) \u003c .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",
          "format": "int32",
          "type": "integer"
        },
        "pod": {
          "$ref": "#/definitions/metachart.api.core.v1.Pod"
        },
        "podFailurePolicy": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.PodFailurePolicy",
          "description": "Specifies the policy of handling failed pods. In particular, it allows to specify the set of actions and conditions which need to be satisfied to take the associated action. If empty, the default behaviour applies - the counter of failed pods, represented by the jobs's .status.failed field, is incremented and it is checked against the backoffLimit. This field cannot be used in combination with restartPolicy=OnFailure."
        },
        "podReplacementPolicy": {
          "description": "podReplacementPolicy specifies when to create replacement Pods. Possible values are: - TerminatingOrFailed means that we recreate pods\n  when they are terminating (has a metadata.deletionTimestamp) or failed.\n- Failed means to wait until a previously created Pod is fully terminated (has phase\n  Failed or Succeeded) before creating a replacement Pod.\n\nWhen using podFailurePolicy, Failed is the the only allowed value. TerminatingOrFailed and Failed are allowed values when podFailurePolicy is not in use. This is an beta field. To use this, enable the JobPodReplacementPolicy feature toggle. This is on by default.",
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors"
        },
        "successPolicy": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.SuccessPolicy",
          "description": "successPolicy specifies the policy when the Job can be declared as succeeded. If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions. When the field is specified, it must be immutable and works only for the Indexed Jobs. Once the Job meets the SuccessPolicy, the lingering pods are terminated."
        },
        "suspend": {
          "description": "suspend specifies whether the Job controller should create Pods or not. If a Job is created with suspend set to true, no Pods are created by the Job controller. If a Job is suspended after creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods associated with this Job. Users must design their workload to gracefully handle this. Suspending a Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds timer too. Defaults to false.",
          "type": "boolean"
        },
        "ttlSecondsAfterFinished": {
          "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "pod"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.api.certificates.v1.CertificateSigningRequest": {
      "additionalProperties": false,
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.\n\nKubelets use this API to obtain:\n 1. client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client-kubelet\" signerName).\n 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the \"kubernetes.io/kubelet-serving\" signerName).\n\nThis API can be used to request client certificates to authenticate to kube-apiserver (with the \"kubernetes.io/kube-apiserver-client\" signerName), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec",
          "description": "spec contains the certificate request, and is immutable after creation. Only the request, signerName, expirationSeconds, and usages fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.core.v1.ConfigMap": {
      "additionalProperties": false,
      "description": "ConfigMap holds configuration data for pods to consume.",
      "properties": {
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object"
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.core.v1.PersistentVolume": {
      "additionalProperties": false,
      "description": "PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.core.v1.PersistentVolumeClaim": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.core.v1.Secret": {
      "additionalProperties": false,
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "properties": {
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "immutable": {
          "description": "Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.",
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "stringData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only input field for convenience. All keys and values are merged into the data field on write, overwriting any existing values. The stringData field is never output when reading from the API.",
          "type": "object"
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.core.v1.Service": {
      "additionalProperties": false,
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec",
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.core.v1.ServiceAccount": {
      "additionalProperties": false,
      "description": "ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets",
      "properties": {
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "secrets": {
          "description": "Secrets is a list of the secrets in the same namespace that pods running using this ServiceAccount are allowed to use. Pods are only limited to this list if this service account has a \"kubernetes.io/enforce-mountable-secrets\" annotation set to \"true\". The \"kubernetes.io/enforce-mountable-secrets\" annotation is deprecated since v1.32. Prefer separate namespaces to isolate access to mounted secrets. This field should not be used to find auto-generated service account token secrets for use outside of pods. Instead, tokens can be requested directly using the TokenRequest API, or service account token secrets can be manually created. More info: https://kubernetes.io/docs/concepts/configuration/secret",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.networking.v1.Ingress": {
      "additionalProperties": false,
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec",
          "description": "spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.networking.v1.IngressClass": {
      "additionalProperties": false,
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec",
          "description": "spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.networking.v1.NetworkPolicy": {
      "additionalProperties": false,
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "spec represents the specification of the desired behavior for this NetworkPolicy."
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.policy.v1.PodDisruptionBudget": {
      "additionalProperties": false,
      "description": "PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.rbac.v1.ClusterRole": {
      "additionalProperties": false,
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller."
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.rbac.v1.ClusterRoleBinding": {
      "additionalProperties": false,
      "description": "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable."
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.rbac.v1.Role": {
      "additionalProperties": false,
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.rbac.v1.RoleBinding": {
      "additionalProperties": false,
      "description": "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. This field is immutable."
        },
        "subjects": {
          "description": "Subjects holds references to the objects the role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.scheduling.v1.PriorityClass": {
      "additionalProperties": false,
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "description": {
          "description": "description is an arbitrary string that usually provides guidelines on when this priority class should be used.",
          "type": "string"
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "globalDefault": {
          "description": "globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default priority.",
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "preemptionPolicy": {
          "description": "preemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
          "type": "string"
        },
        "value": {
          "description": "value represents the integer value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.api.storage.v1.StorageClass": {
      "additionalProperties": false,
      "description": "StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.\n\nStorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "allowVolumeExpansion shows whether the storage class allow volume expand.",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "allowedTopologies restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "mountOptions": {
          "description": "mountOptions controls the mountOptions for dynamically provisioned PersistentVolumes of this storage class. e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "parameters holds the parameters for the provisioner that should create volumes of this storage class.",
          "type": "object"
        },
        "provisioner": {
          "description": "provisioner indicates the type of the provisioner.",
          "type": "string"
        },
        "reclaimPolicy": {
          "description": "reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.",
          "type": "string"
        },
        "volumeBindingMode": {
          "description": "volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.",
          "type": "string"
        }
      },
      "required": [
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition": {
      "additionalProperties": false,
      "description": "CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format \u003c.spec.name\u003e.\u003c.spec.group\u003e.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "spec describes how the user wants the resources to appear"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService": {
      "additionalProperties": false,
      "description": "APIService represents a server for a particular GroupVersion. Name must be \"version.group\".",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Spec contains information for locating and communicating with a server"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "metachart.api.io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClass": {
      "additionalProperties": false,
      "description": "SecretProviderClass is the Schema for the secretproviderclasses API",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClassSpec",
          "default": {}
        }
      },
      "type": "object"
    },
    "metachart.api.io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClassPodStatus": {
      "additionalProperties": false,
      "description": "SecretProviderClassPodStatus is the Schema for the secretproviderclassespodstatus API",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        }
      },
      "type": "object"
    },
    "metachart.api.meta.v1.ObjectMeta": {
      "additionalProperties": false,
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "checksums": {
          "$ref": "#/definitions/metachart.interface.checksums"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      },
      "type": "object"
    },
    "metachart.interface.FQDNitem": {
      "pattern": "^[a-z][0-9a-z]*(-[0-9a-z]+)*$",
      "type": "string"
    },
    "metachart.interface.boolean": {
      "type": "boolean"
    },
    "metachart.interface.checksumEntryList": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/definitions/metachart.interface.FQDNitem"
          },
          "type": "array"
        },
        {
          "enum": [
            "*"
          ]
        }
      ]
    },
    "metachart.interface.checksums": {
      "properties": {
        "acraccesstokens": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "alertmanagerconfigs": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "apiservices": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "certificatesigningrequests": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "clusterexternalsecrets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "clustergenerators": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "clusterpushsecrets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "clusterrolebindings": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "clusterroles": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "clustersecretstores": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "configmaps": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "cronjobs": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "customresourcedefinitions": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "daemonsets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "deployments": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "ecrauthorizationtokens": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "externalsecrets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "fakes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "gcraccesstokens": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "githubaccesstokens": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "grafanas": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "horizontalpodautoscalers": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "images": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "ingressclasses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "ingresses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "jobs": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "mfas": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "mutatingwebhookconfigurations": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "networkpolicies": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "passwords": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "persistentvolumeclaims": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "persistentvolumes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "poddisruptionbudgets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "podmonitors": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "pods": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "priorityclasses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "prometheusrules": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "pushsecrets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "quayaccesstokens": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "rolebindings": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "roles": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "secretproviderclasses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "secretproviderclasspodstatuses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "secrets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "secretstores": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "serviceaccounts": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "services": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "statefulsets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "storageclasses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "stssessiontokens": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "uuids": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "validatingwebhookconfigurations": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "vaultdynamicsecrets": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "webhooks": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "acraccesstokens": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.ACRAccessToken"
        }
      },
      "type": "object"
    },
    "alertmanagerconfigs": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfig"
        }
      },
      "type": "object"
    },
    "apiservices": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
        }
      },
      "type": "object"
    },
    "certificatesigningrequests": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.certificates.v1.CertificateSigningRequest"
        }
      },
      "type": "object"
    },
    "clusterexternalsecrets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecret"
        }
      },
      "type": "object"
    },
    "clustergenerators": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.ClusterGenerator"
        }
      },
      "type": "object"
    },
    "clusterpushsecrets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecret"
        }
      },
      "type": "object"
    },
    "clusterrolebindings": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.ClusterRoleBinding"
        }
      },
      "type": "object"
    },
    "clusterroles": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.ClusterRole"
        }
      },
      "type": "object"
    },
    "clustersecretstores": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.ClusterSecretStore"
        }
      },
      "type": "object"
    },
    "configmaps": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.ConfigMap"
        }
      },
      "type": "object"
    },
    "context": {
      "description": "Any content which can be used for config rendering without schema defined by the chart",
      "type": "object"
    },
    "cronjobs": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.CronJob"
        }
      },
      "type": "object"
    },
    "customresourcedefinitions": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
        }
      },
      "type": "object"
    },
    "daemonsets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.DaemonSet"
        }
      },
      "type": "object"
    },
    "deployments": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.Deployment"
        }
      },
      "type": "object"
    },
    "ecrauthorizationtokens": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationToken"
        }
      },
      "type": "object"
    },
    "externalsecrets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.ExternalSecret"
        }
      },
      "type": "object"
    },
    "fakes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Fake"
        }
      },
      "type": "object"
    },
    "fullnameOverride": {
      "anyOf": [
        {
          "$ref": "#/definitions/metachart.interface.FQDNitem"
        },
        {
          "type": "null"
        }
      ]
    },
    "gcraccesstokens": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.GCRAccessToken"
        }
      },
      "type": "object"
    },
    "githubaccesstokens": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.GithubAccessToken"
        }
      },
      "type": "object"
    },
    "grafanas": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Grafana"
        }
      },
      "type": "object"
    },
    "horizontalpodautoscalers": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
        }
      },
      "type": "object"
    },
    "images": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.internal.Image"
        }
      },
      "type": "object"
    },
    "ingressclasses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.networking.v1.IngressClass"
        }
      },
      "type": "object"
    },
    "ingresses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.networking.v1.Ingress"
        }
      },
      "type": "object"
    },
    "jobs": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.Job"
        }
      },
      "type": "object"
    },
    "mfas": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.MFA"
        }
      },
      "type": "object"
    },
    "mutatingwebhookconfigurations": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
        }
      },
      "type": "object"
    },
    "networkpolicies": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.networking.v1.NetworkPolicy"
        }
      },
      "type": "object"
    },
    "passwords": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Password"
        }
      },
      "type": "object"
    },
    "persistentvolumeclaims": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.PersistentVolumeClaim"
        }
      },
      "type": "object"
    },
    "persistentvolumes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.PersistentVolume"
        }
      },
      "type": "object"
    },
    "poddisruptionbudgets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.policy.v1.PodDisruptionBudget"
        }
      },
      "type": "object"
    },
    "podmonitors": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
        }
      },
      "type": "object"
    },
    "pods": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.core.v1.Pod"
        }
      },
      "type": "object"
    },
    "priorityclasses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.scheduling.v1.PriorityClass"
        }
      },
      "type": "object"
    },
    "prometheusrules": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRule"
        }
      },
      "type": "object"
    },
    "pushsecrets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1alpha1.PushSecret"
        }
      },
      "type": "object"
    },
    "quayaccesstokens": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.QuayAccessToken"
        }
      },
      "type": "object"
    },
    "rolebindings": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.RoleBinding"
        }
      },
      "type": "object"
    },
    "roles": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.Role"
        }
      },
      "type": "object"
    },
    "secretproviderclasses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClass"
        }
      },
      "type": "object"
    },
    "secretproviderclasspodstatuses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClassPodStatus"
        }
      },
      "type": "object"
    },
    "secrets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Secret"
        }
      },
      "type": "object"
    },
    "secretstores": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.SecretStore"
        }
      },
      "type": "object"
    },
    "serviceaccounts": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.ServiceAccount"
        }
      },
      "type": "object"
    },
    "services": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Service"
        }
      },
      "type": "object"
    },
    "settings": {
      "additionalProperties": false,
      "properties": {
        "acraccesstokens": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.ACRAccessToken"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "alertmanagerconfigs": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfig"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "apiservices": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "certificatesigningrequests": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.certificates.v1.CertificateSigningRequest"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "clusterexternalsecrets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.ClusterExternalSecret"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "clustergenerators": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.ClusterGenerator"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "clusterpushsecrets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1alpha1.ClusterPushSecret"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "clusterrolebindings": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.ClusterRoleBinding"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "clusterroles": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.ClusterRole"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "clustersecretstores": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.ClusterSecretStore"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "configmaps": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.ConfigMap"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "containers": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.core.v1.Container"
            }
          },
          "type": "object"
        },
        "cronjobs": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.CronJob"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "customresourcedefinitions": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "daemonsets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.DaemonSet"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "deployments": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.Deployment"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "ecrauthorizationtokens": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.ECRAuthorizationToken"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "externalsecrets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.ExternalSecret"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "fakes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Fake"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "gcraccesstokens": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.GCRAccessToken"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "githubaccesstokens": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.GithubAccessToken"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "global": {
          "additionalProperties": false,
          "properties": {
            "annotations": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "grafanas": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Grafana"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "horizontalpodautoscalers": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "images": {
          "properties": {
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "ingressclasses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.networking.v1.IngressClass"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "ingresses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.networking.v1.Ingress"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jobs": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.batch.v1.Job"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mfas": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.MFA"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mutatingwebhookconfigurations": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "networkpolicies": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.networking.v1.NetworkPolicy"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "passwords": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Password"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "persistentvolumeclaims": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.PersistentVolumeClaim"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "persistentvolumes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.PersistentVolume"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "poddisruptionbudgets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.policy.v1.PodDisruptionBudget"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "podmonitors": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "pods": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.core.v1.Pod"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "priorityclasses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.scheduling.v1.PriorityClass"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "prometheusrules": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRule"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "pushsecrets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1alpha1.PushSecret"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "quayaccesstokens": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.QuayAccessToken"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "rolebindings": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.RoleBinding"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "roles": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.rbac.v1.Role"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "secretproviderclasses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClass"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "secretproviderclasspodstatuses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.x-k8s.csi.secrets-store.apis.v1.SecretProviderClassPodStatus"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "secrets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Secret"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "secretstores": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.externalsecrets.v1.SecretStore"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "serviceaccounts": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.ServiceAccount"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "services": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.core.v1.Service"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "statefulsets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.StatefulSet"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "storageclasses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.storage.v1.StorageClass"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "stssessiontokens": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.STSSessionToken"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "uuids": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.UUID"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "validatingwebhookconfigurations": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "vaultdynamicsecrets": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecret"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "webhooks": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Webhook"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "statefulsets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.apps.v1.StatefulSet"
        }
      },
      "type": "object"
    },
    "storageclasses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.storage.v1.StorageClass"
        }
      },
      "type": "object"
    },
    "stssessiontokens": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.STSSessionToken"
        }
      },
      "type": "object"
    },
    "uuids": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.UUID"
        }
      },
      "type": "object"
    },
    "validatingwebhookconfigurations": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
        }
      },
      "type": "object"
    },
    "vaultdynamicsecrets": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.VaultDynamicSecret"
        }
      },
      "type": "object"
    },
    "webhooks": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.external-secrets.apis.generators.v1alpha1.Webhook"
        }
      },
      "type": "object"
    }
  }
}